# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fcsm_eos_api_client.api_client import ApiClient
from fcsm_eos_api_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class AwsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def aws_service_api_availability_zones_get(self, subscription_id, **kwargs):  # noqa: E501
        """aws_service_api_availability_zones_get  # noqa: E501

        List all availability zones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_availability_zones_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsAvailabilityZone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_availability_zones_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_availability_zones_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """aws_service_api_availability_zones_get  # noqa: E501

        List all availability zones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_availability_zones_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsAvailabilityZone], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_availability_zones_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_availability_zones_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/availabilityZones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsAvailabilityZone]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_flavor_get(self, subscription_id, flavor_id, **kwargs):  # noqa: E501
        """Get flavor by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_flavor_get(subscription_id, flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str flavor_id: Flavor id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsFlavor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_flavor_get_with_http_info(subscription_id, flavor_id, **kwargs)  # noqa: E501

    def aws_service_api_flavor_get_with_http_info(self, subscription_id, flavor_id, **kwargs):  # noqa: E501
        """Get flavor by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_flavor_get_with_http_info(subscription_id, flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str flavor_id: Flavor id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsFlavor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'flavor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_flavor_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_flavor_get`")  # noqa: E501
        # verify the required parameter 'flavor_id' is set
        if ('flavor_id' not in local_var_params or
                local_var_params['flavor_id'] is None):
            raise ApiValueError("Missing the required parameter `flavor_id` when calling `aws_service_api_flavor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor_id' in local_var_params:
            path_params['flavor_id'] = local_var_params['flavor_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/flavors/{flavor_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsFlavor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_flavors_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists flavors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_flavors_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsFlavor]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_flavors_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_flavors_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists flavors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_flavors_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsFlavor], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_flavors_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_flavors_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/flavors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsFlavor]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_image_get(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_image_get(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_image_get_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def aws_service_api_image_get_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_image_get_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsImage, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_image_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_image_get`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `aws_service_api_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['image_id'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/images/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_interfaces_get(self, subscription_id, **kwargs):  # noqa: E501
        """Gets interfaces for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_interfaces_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Vm id to filter by
        :param str network_id: Network id to filter by
        :param str subnet_id: Subnet id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsInterface]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_interfaces_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_interfaces_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Gets interfaces for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_interfaces_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Vm id to filter by
        :param str network_id: Network id to filter by
        :param str subnet_id: Subnet id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsInterface], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'network_id', 'subnet_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_interfaces_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_interfaces_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501
        if 'network_id' in local_var_params:
            query_params.append(('networkId', local_var_params['network_id']))  # noqa: E501
        if 'subnet_id' in local_var_params:
            query_params.append(('subnetId', local_var_params['subnet_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsInterface]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_keypair_delete(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Delete keypair by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypair_delete(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str keypair_id: Keypair id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_keypair_delete_with_http_info(subscription_id, keypair_id, **kwargs)  # noqa: E501

    def aws_service_api_keypair_delete_with_http_info(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Delete keypair by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypair_delete_with_http_info(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str keypair_id: Keypair id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'keypair_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_keypair_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_keypair_delete`")  # noqa: E501
        # verify the required parameter 'keypair_id' is set
        if ('keypair_id' not in local_var_params or
                local_var_params['keypair_id'] is None):
            raise ApiValueError("Missing the required parameter `keypair_id` when calling `aws_service_api_keypair_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypair_id' in local_var_params:
            path_params['keypair_id'] = local_var_params['keypair_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/keypairs/{keypair_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_keypair_generate_post(self, subscription_id, aws_create_keypair, **kwargs):  # noqa: E501
        """Create a new keypair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypair_generate_post(subscription_id, aws_create_keypair, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsCreateKeypair aws_create_keypair: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsKeypair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_keypair_generate_post_with_http_info(subscription_id, aws_create_keypair, **kwargs)  # noqa: E501

    def aws_service_api_keypair_generate_post_with_http_info(self, subscription_id, aws_create_keypair, **kwargs):  # noqa: E501
        """Create a new keypair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypair_generate_post_with_http_info(subscription_id, aws_create_keypair, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsCreateKeypair aws_create_keypair: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsKeypair, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'aws_create_keypair']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_keypair_generate_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_keypair_generate_post`")  # noqa: E501
        # verify the required parameter 'aws_create_keypair' is set
        if ('aws_create_keypair' not in local_var_params or
                local_var_params['aws_create_keypair'] is None):
            raise ApiValueError("Missing the required parameter `aws_create_keypair` when calling `aws_service_api_keypair_generate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_create_keypair' in local_var_params:
            body_params = local_var_params['aws_create_keypair']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/keypairs/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsKeypair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_keypair_get(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Get keypair by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypair_get(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str keypair_id: Keypair id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsKeypair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_keypair_get_with_http_info(subscription_id, keypair_id, **kwargs)  # noqa: E501

    def aws_service_api_keypair_get_with_http_info(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Get keypair by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypair_get_with_http_info(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str keypair_id: Keypair id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsKeypair, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'keypair_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_keypair_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_keypair_get`")  # noqa: E501
        # verify the required parameter 'keypair_id' is set
        if ('keypair_id' not in local_var_params or
                local_var_params['keypair_id'] is None):
            raise ApiValueError("Missing the required parameter `keypair_id` when calling `aws_service_api_keypair_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypair_id' in local_var_params:
            path_params['keypair_id'] = local_var_params['keypair_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/keypairs/{keypair_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsKeypair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_keypair_import_post(self, subscription_id, aws_import_keypair, **kwargs):  # noqa: E501
        """Import a new public key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypair_import_post(subscription_id, aws_import_keypair, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsImportKeypair aws_import_keypair: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsKeypair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_keypair_import_post_with_http_info(subscription_id, aws_import_keypair, **kwargs)  # noqa: E501

    def aws_service_api_keypair_import_post_with_http_info(self, subscription_id, aws_import_keypair, **kwargs):  # noqa: E501
        """Import a new public key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypair_import_post_with_http_info(subscription_id, aws_import_keypair, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsImportKeypair aws_import_keypair: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsKeypair, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'aws_import_keypair']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_keypair_import_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_keypair_import_post`")  # noqa: E501
        # verify the required parameter 'aws_import_keypair' is set
        if ('aws_import_keypair' not in local_var_params or
                local_var_params['aws_import_keypair'] is None):
            raise ApiValueError("Missing the required parameter `aws_import_keypair` when calling `aws_service_api_keypair_import_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_import_keypair' in local_var_params:
            body_params = local_var_params['aws_import_keypair']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['applicaiton/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/keypairs/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsKeypair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_keypairs_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists keypairs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypairs_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str availability_zone: Availability zone to filter by
        :param str availability_zone_id: Availability zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsKeypair]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_keypairs_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_keypairs_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists keypairs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_keypairs_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str availability_zone: Availability zone to filter by
        :param str availability_zone_id: Availability zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsKeypair], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone', 'availability_zone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_keypairs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_keypairs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/keypairs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsKeypair]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_network_subnets_get(self, subscription_id, network_id, **kwargs):  # noqa: E501
        """Lists subnets of specified network and subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_network_subnets_get(subscription_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str network_id: ID of network (required)
        :param str availability_zone_id: Availability zone to filter by
        :param str availability_zone: Availability zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsSubnet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_network_subnets_get_with_http_info(subscription_id, network_id, **kwargs)  # noqa: E501

    def aws_service_api_network_subnets_get_with_http_info(self, subscription_id, network_id, **kwargs):  # noqa: E501
        """Lists subnets of specified network and subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_network_subnets_get_with_http_info(subscription_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str network_id: ID of network (required)
        :param str availability_zone_id: Availability zone to filter by
        :param str availability_zone: Availability zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsSubnet], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'network_id', 'availability_zone_id', 'availability_zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_network_subnets_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_network_subnets_get`")  # noqa: E501
        # verify the required parameter 'network_id' is set
        if ('network_id' not in local_var_params or
                local_var_params['network_id'] is None):
            raise ApiValueError("Missing the required parameter `network_id` when calling `aws_service_api_network_subnets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'network_id' in local_var_params:
            path_params['network_id'] = local_var_params['network_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/networks/{network_id}/subnets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsSubnet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_networks_get(self, subscription_id, **kwargs):  # noqa: E501
        """Gets list of all networks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_networks_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str availability_zone: Availability zone to filter by
        :param str availability_zone_id: Availability zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsNetwork]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_networks_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_networks_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Gets list of all networks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_networks_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str availability_zone: Availability zone to filter by
        :param str availability_zone_id: Availability zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsNetwork], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone', 'availability_zone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_networks_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_networks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/networks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsNetwork]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_private_image_get(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets private image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_private_image_get(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_private_image_get_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def aws_service_api_private_image_get_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets private image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_private_image_get_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsImage, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_private_image_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_private_image_get`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `aws_service_api_private_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['image_id'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/privateImages/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_private_images_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists private images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_private_images_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str name: Image name to filter by. Specify name or id
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsImage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_private_images_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_private_images_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists private images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_private_images_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str name: Image name to filter by. Specify name or id
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsImage], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_private_images_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_private_images_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/privateImages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsImage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_public_image_get(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets public image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_public_image_get(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_public_image_get_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def aws_service_api_public_image_get_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets public image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_public_image_get_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsImage, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_public_image_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_public_image_get`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `aws_service_api_public_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['image_id'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/publicImages/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_public_images_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists public images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_public_images_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str name: Image name to filter by. Specify name or id
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsImage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_public_images_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_public_images_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists public images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_public_images_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str name: Image name to filter by. Specify name or id
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsImage], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_public_images_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_public_images_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/publicImages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsImage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_regions_get(self, **kwargs):  # noqa: E501
        """aws_service_api_regions_get  # noqa: E501

        Lists regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_regions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsRegion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_regions_get_with_http_info(**kwargs)  # noqa: E501

    def aws_service_api_regions_get_with_http_info(self, **kwargs):  # noqa: E501
        """aws_service_api_regions_get  # noqa: E501

        Lists regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_regions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsRegion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_regions_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsRegion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_security_groups_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists security groups for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_security_groups_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Vm id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsSecurityGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_security_groups_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_security_groups_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists security groups for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_security_groups_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Vm id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsSecurityGroup], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_security_groups_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_security_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/securityGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsSecurityGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_snapshot_delete(self, subscription_id, snapshot_id, **kwargs):  # noqa: E501
        """Deletes snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_snapshot_delete(subscription_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str snapshot_id: Snapshot id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_snapshot_delete_with_http_info(subscription_id, snapshot_id, **kwargs)  # noqa: E501

    def aws_service_api_snapshot_delete_with_http_info(self, subscription_id, snapshot_id, **kwargs):  # noqa: E501
        """Deletes snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_snapshot_delete_with_http_info(subscription_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str snapshot_id: Snapshot id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'snapshot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_snapshot_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_snapshot_delete`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in local_var_params or
                local_var_params['snapshot_id'] is None):
            raise ApiValueError("Missing the required parameter `snapshot_id` when calling `aws_service_api_snapshot_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'snapshot_id' in local_var_params:
            path_params['snapshot_id'] = local_var_params['snapshot_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/snapshots/{snapshot_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_snapshots_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_snapshots_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Vm id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_snapshots_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_snapshots_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_snapshots_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Vm id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsSnapshot], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_snapshots_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_snapshots_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/snapshots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_snapshots_post(self, subscription_id, aws_create_snapshot_params, **kwargs):  # noqa: E501
        """Creates a new snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_snapshots_post(subscription_id, aws_create_snapshot_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsCreateSnapshotParams aws_create_snapshot_params: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_snapshots_post_with_http_info(subscription_id, aws_create_snapshot_params, **kwargs)  # noqa: E501

    def aws_service_api_snapshots_post_with_http_info(self, subscription_id, aws_create_snapshot_params, **kwargs):  # noqa: E501
        """Creates a new snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_snapshots_post_with_http_info(subscription_id, aws_create_snapshot_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsCreateSnapshotParams aws_create_snapshot_params: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsSnapshot, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'aws_create_snapshot_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_snapshots_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_snapshots_post`")  # noqa: E501
        # verify the required parameter 'aws_create_snapshot_params' is set
        if ('aws_create_snapshot_params' not in local_var_params or
                local_var_params['aws_create_snapshot_params'] is None):
            raise ApiValueError("Missing the required parameter `aws_create_snapshot_params` when calling `aws_service_api_snapshots_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_create_snapshot_params' in local_var_params:
            body_params = local_var_params['aws_create_snapshot_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_validate_subscription_post(self, aws_validate_subscription, **kwargs):  # noqa: E501
        """aws_service_api_validate_subscription_post  # noqa: E501

        Validate subscription credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_validate_subscription_post(aws_validate_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AwsValidateSubscription aws_validate_subscription: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_validate_subscription_post_with_http_info(aws_validate_subscription, **kwargs)  # noqa: E501

    def aws_service_api_validate_subscription_post_with_http_info(self, aws_validate_subscription, **kwargs):  # noqa: E501
        """aws_service_api_validate_subscription_post  # noqa: E501

        Validate subscription credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_validate_subscription_post_with_http_info(aws_validate_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AwsValidateSubscription aws_validate_subscription: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['aws_validate_subscription']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_validate_subscription_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aws_validate_subscription' is set
        if ('aws_validate_subscription' not in local_var_params or
                local_var_params['aws_validate_subscription'] is None):
            raise ApiValueError("Missing the required parameter `aws_validate_subscription` when calling `aws_service_api_validate_subscription_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_validate_subscription' in local_var_params:
            body_params = local_var_params['aws_validate_subscription']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/validateSubscription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_command_put(self, subscription_id, vm_id, action, **kwargs):  # noqa: E501
        """Excecutes power action on a VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_command_put(subscription_id, vm_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param str action: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_command_put_with_http_info(subscription_id, vm_id, action, **kwargs)  # noqa: E501

    def aws_service_api_vm_command_put_with_http_info(self, subscription_id, vm_id, action, **kwargs):  # noqa: E501
        """Excecutes power action on a VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_command_put_with_http_info(subscription_id, vm_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param str action: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_command_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_command_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_command_put`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in local_var_params or
                local_var_params['action'] is None):
            raise ApiValueError("Missing the required parameter `action` when calling `aws_service_api_vm_command_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501
        if 'action' in local_var_params:
            path_params['action'] = local_var_params['action']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/command/{action}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_delete(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Deletes VM by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_delete(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_delete_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def aws_service_api_vm_delete_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Deletes VM by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_delete_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_details_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets VM details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_details_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsVMDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_details_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def aws_service_api_vm_details_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets VM details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_details_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsVMDetail], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_details_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_details_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsVMDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets vm by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsVMExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def aws_service_api_vm_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets vm by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsVMExtended, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsVMExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_management_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets management status for a VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_management_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsManagementStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_management_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def aws_service_api_vm_management_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets management status for a VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_management_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsManagementStatus, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_management_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_management_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_management_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/management', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsManagementStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_password_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """aws_service_api_vm_password_get  # noqa: E501

        Get encrypted password for a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_password_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsEncryptedPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_password_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def aws_service_api_vm_password_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """aws_service_api_vm_password_get  # noqa: E501

        Get encrypted password for a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_password_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsEncryptedPassword, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_password_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_password_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_password_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsEncryptedPassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_patch(self, subscription_id, vm_id, aws_update_vm_params, **kwargs):  # noqa: E501
        """Modify VM properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_patch(subscription_id, vm_id, aws_update_vm_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param AwsUpdateVmParams aws_update_vm_params: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_patch_with_http_info(subscription_id, vm_id, aws_update_vm_params, **kwargs)  # noqa: E501

    def aws_service_api_vm_patch_with_http_info(self, subscription_id, vm_id, aws_update_vm_params, **kwargs):  # noqa: E501
        """Modify VM properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_patch_with_http_info(subscription_id, vm_id, aws_update_vm_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param AwsUpdateVmParams aws_update_vm_params: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'aws_update_vm_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_patch`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_patch`")  # noqa: E501
        # verify the required parameter 'aws_update_vm_params' is set
        if ('aws_update_vm_params' not in local_var_params or
                local_var_params['aws_update_vm_params'] is None):
            raise ApiValueError("Missing the required parameter `aws_update_vm_params` when calling `aws_service_api_vm_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_update_vm_params' in local_var_params:
            body_params = local_var_params['aws_update_vm_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_security_group_delete(self, subscription_id, vm_id, security_group_id, **kwargs):  # noqa: E501
        """Removes Security Group from a specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_security_group_delete(subscription_id, vm_id, security_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param str security_group_id: Security Group Id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_security_group_delete_with_http_info(subscription_id, vm_id, security_group_id, **kwargs)  # noqa: E501

    def aws_service_api_vm_security_group_delete_with_http_info(self, subscription_id, vm_id, security_group_id, **kwargs):  # noqa: E501
        """Removes Security Group from a specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_security_group_delete_with_http_info(subscription_id, vm_id, security_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param str security_group_id: Security Group Id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'security_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_security_group_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_security_group_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_security_group_delete`")  # noqa: E501
        # verify the required parameter 'security_group_id' is set
        if ('security_group_id' not in local_var_params or
                local_var_params['security_group_id'] is None):
            raise ApiValueError("Missing the required parameter `security_group_id` when calling `aws_service_api_vm_security_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501
        if 'security_group_id' in local_var_params:
            path_params['security_group_id'] = local_var_params['security_group_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/securityGroups/{security_group_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_security_group_put(self, subscription_id, vm_id, security_group_id, **kwargs):  # noqa: E501
        """Assign Security Group to a specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_security_group_put(subscription_id, vm_id, security_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param str security_group_id: Security Group Id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_security_group_put_with_http_info(subscription_id, vm_id, security_group_id, **kwargs)  # noqa: E501

    def aws_service_api_vm_security_group_put_with_http_info(self, subscription_id, vm_id, security_group_id, **kwargs):  # noqa: E501
        """Assign Security Group to a specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_security_group_put_with_http_info(subscription_id, vm_id, security_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param str security_group_id: Security Group Id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'security_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_security_group_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_security_group_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_security_group_put`")  # noqa: E501
        # verify the required parameter 'security_group_id' is set
        if ('security_group_id' not in local_var_params or
                local_var_params['security_group_id'] is None):
            raise ApiValueError("Missing the required parameter `security_group_id` when calling `aws_service_api_vm_security_group_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501
        if 'security_group_id' in local_var_params:
            path_params['security_group_id'] = local_var_params['security_group_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/securityGroups/{security_group_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_tag_put(self, subscription_id, vm_id, aws_tag_update, **kwargs):  # noqa: E501
        """Set tag value for VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_tag_put(subscription_id, vm_id, aws_tag_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param AwsTagUpdate aws_tag_update: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_tag_put_with_http_info(subscription_id, vm_id, aws_tag_update, **kwargs)  # noqa: E501

    def aws_service_api_vm_tag_put_with_http_info(self, subscription_id, vm_id, aws_tag_update, **kwargs):  # noqa: E501
        """Set tag value for VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_tag_put_with_http_info(subscription_id, vm_id, aws_tag_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param AwsTagUpdate aws_tag_update: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'aws_tag_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_tag_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_tag_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_tag_put`")  # noqa: E501
        # verify the required parameter 'aws_tag_update' is set
        if ('aws_tag_update' not in local_var_params or
                local_var_params['aws_tag_update'] is None):
            raise ApiValueError("Missing the required parameter `aws_tag_update` when calling `aws_service_api_vm_tag_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_tag_update' in local_var_params:
            body_params = local_var_params['aws_tag_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/setTag', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_workshift_delete(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Delete VM Workshift  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_workshift_delete(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_workshift_delete_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def aws_service_api_vm_workshift_delete_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Delete VM Workshift  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_workshift_delete_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_workshift_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_workshift_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_workshift_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/workshift', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_workshift_post(self, subscription_id, vm_id, aws_workshift, **kwargs):  # noqa: E501
        """Add a workshift to the VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_workshift_post(subscription_id, vm_id, aws_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param AwsWorkshift aws_workshift: Workshift object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsWorkshift
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_workshift_post_with_http_info(subscription_id, vm_id, aws_workshift, **kwargs)  # noqa: E501

    def aws_service_api_vm_workshift_post_with_http_info(self, subscription_id, vm_id, aws_workshift, **kwargs):  # noqa: E501
        """Add a workshift to the VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_workshift_post_with_http_info(subscription_id, vm_id, aws_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param AwsWorkshift aws_workshift: Workshift object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsWorkshift, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'aws_workshift']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_workshift_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_workshift_post`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_workshift_post`")  # noqa: E501
        # verify the required parameter 'aws_workshift' is set
        if ('aws_workshift' not in local_var_params or
                local_var_params['aws_workshift'] is None):
            raise ApiValueError("Missing the required parameter `aws_workshift` when calling `aws_service_api_vm_workshift_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_workshift' in local_var_params:
            body_params = local_var_params['aws_workshift']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/workshift', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsWorkshift',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vm_workshift_put(self, subscription_id, vm_id, aws_workshift, **kwargs):  # noqa: E501
        """Update VM Workshift  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_workshift_put(subscription_id, vm_id, aws_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param AwsWorkshift aws_workshift: Workshift object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsWorkshift
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vm_workshift_put_with_http_info(subscription_id, vm_id, aws_workshift, **kwargs)  # noqa: E501

    def aws_service_api_vm_workshift_put_with_http_info(self, subscription_id, vm_id, aws_workshift, **kwargs):  # noqa: E501
        """Update VM Workshift  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vm_workshift_put_with_http_info(subscription_id, vm_id, aws_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str vm_id: Virtual Machine id (required)
        :param AwsWorkshift aws_workshift: Workshift object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsWorkshift, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'aws_workshift']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vm_workshift_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vm_workshift_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_vm_workshift_put`")  # noqa: E501
        # verify the required parameter 'aws_workshift' is set
        if ('aws_workshift' not in local_var_params or
                local_var_params['aws_workshift'] is None):
            raise ApiValueError("Missing the required parameter `aws_workshift` when calling `aws_service_api_vm_workshift_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_workshift' in local_var_params:
            body_params = local_var_params['aws_workshift']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms/{vm_id}/workshift', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsWorkshift',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vms_get(self, subscription_id, **kwargs):  # noqa: E501
        """Gets list of all vms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vms_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str availability_zone_id: Availability zone to filter by
        :param str availability_zone: Availability zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsVMSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vms_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_vms_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Gets list of all vms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vms_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str availability_zone_id: Availability zone to filter by
        :param str availability_zone: Availability zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsVMSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone_id', 'availability_zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vms_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsVMSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_vms_post(self, subscription_id, aws_vm_create, **kwargs):  # noqa: E501
        """aws_service_api_vms_post  # noqa: E501

        Create a new virtual machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vms_post(subscription_id, aws_vm_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsVMCreate aws_vm_create: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsVMExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_vms_post_with_http_info(subscription_id, aws_vm_create, **kwargs)  # noqa: E501

    def aws_service_api_vms_post_with_http_info(self, subscription_id, aws_vm_create, **kwargs):  # noqa: E501
        """aws_service_api_vms_post  # noqa: E501

        Create a new virtual machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_vms_post_with_http_info(subscription_id, aws_vm_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsVMCreate aws_vm_create: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsVMExtended, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'aws_vm_create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_vms_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_vms_post`")  # noqa: E501
        # verify the required parameter 'aws_vm_create' is set
        if ('aws_vm_create' not in local_var_params or
                local_var_params['aws_vm_create'] is None):
            raise ApiValueError("Missing the required parameter `aws_vm_create` when calling `aws_service_api_vms_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_vm_create' in local_var_params:
            body_params = local_var_params['aws_vm_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/vms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsVMExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_volume_attachment_delete(self, subscription_id, volume_id, vm_id, **kwargs):  # noqa: E501
        """aws_service_api_volume_attachment_delete  # noqa: E501

        Detach volume from a specified vm  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_attachment_delete(subscription_id, volume_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param str vm_id: VM id to attach volume (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_volume_attachment_delete_with_http_info(subscription_id, volume_id, vm_id, **kwargs)  # noqa: E501

    def aws_service_api_volume_attachment_delete_with_http_info(self, subscription_id, volume_id, vm_id, **kwargs):  # noqa: E501
        """aws_service_api_volume_attachment_delete  # noqa: E501

        Detach volume from a specified vm  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_attachment_delete_with_http_info(subscription_id, volume_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param str vm_id: VM id to attach volume (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_volume_attachment_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_volume_attachment_delete`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `aws_service_api_volume_attachment_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_volume_attachment_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/volumes/{volume_id}/detach', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_volume_attachment_put(self, subscription_id, volume_id, vm_id, **kwargs):  # noqa: E501
        """aws_service_api_volume_attachment_put  # noqa: E501

        Attach volume to specified VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_attachment_put(subscription_id, volume_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param str vm_id: VM id to attach volume (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsNewVolumeAttachment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_volume_attachment_put_with_http_info(subscription_id, volume_id, vm_id, **kwargs)  # noqa: E501

    def aws_service_api_volume_attachment_put_with_http_info(self, subscription_id, volume_id, vm_id, **kwargs):  # noqa: E501
        """aws_service_api_volume_attachment_put  # noqa: E501

        Attach volume to specified VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_attachment_put_with_http_info(subscription_id, volume_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param str vm_id: VM id to attach volume (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsNewVolumeAttachment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_volume_attachment_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_volume_attachment_put`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `aws_service_api_volume_attachment_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `aws_service_api_volume_attachment_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/volumes/{volume_id}/attach', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsNewVolumeAttachment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_volume_delete(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Deletes volume by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_delete(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_volume_delete_with_http_info(subscription_id, volume_id, **kwargs)  # noqa: E501

    def aws_service_api_volume_delete_with_http_info(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Deletes volume by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_delete_with_http_info(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_volume_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_volume_delete`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `aws_service_api_volume_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/volumes/{volume_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_volume_get(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Gets volume by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_get(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsVolume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_volume_get_with_http_info(subscription_id, volume_id, **kwargs)  # noqa: E501

    def aws_service_api_volume_get_with_http_info(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Gets volume by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_get_with_http_info(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsVolume, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_volume_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_volume_get`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `aws_service_api_volume_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/volumes/{volume_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsVolume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_volume_patch(self, subscription_id, volume_id, aws_update_volume_params, **kwargs):  # noqa: E501
        """Modify volume properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_patch(subscription_id, volume_id, aws_update_volume_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param AwsUpdateVolumeParams aws_update_volume_params: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_volume_patch_with_http_info(subscription_id, volume_id, aws_update_volume_params, **kwargs)  # noqa: E501

    def aws_service_api_volume_patch_with_http_info(self, subscription_id, volume_id, aws_update_volume_params, **kwargs):  # noqa: E501
        """Modify volume properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_patch_with_http_info(subscription_id, volume_id, aws_update_volume_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str volume_id: Volume id (required)
        :param AwsUpdateVolumeParams aws_update_volume_params: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id', 'aws_update_volume_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_volume_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_volume_patch`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `aws_service_api_volume_patch`")  # noqa: E501
        # verify the required parameter 'aws_update_volume_params' is set
        if ('aws_update_volume_params' not in local_var_params or
                local_var_params['aws_update_volume_params'] is None):
            raise ApiValueError("Missing the required parameter `aws_update_volume_params` when calling `aws_service_api_volume_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_update_volume_params' in local_var_params:
            body_params = local_var_params['aws_update_volume_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/volumes/{volume_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_volume_types_get(self, subscription_id, **kwargs):  # noqa: E501
        """Gets a list of all volume types user can create volume with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_types_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param bool is_os_compatible:
        :param str availability_zone_id: Availability zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsVolumeType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_volume_types_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_volume_types_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Gets a list of all volume types user can create volume with  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volume_types_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param bool is_os_compatible:
        :param str availability_zone_id: Availability zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsVolumeType], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'is_os_compatible', 'availability_zone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_volume_types_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_volume_types_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'is_os_compatible' in local_var_params:
            query_params.append(('isOsCompatible', local_var_params['is_os_compatible']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/volumeTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsVolumeType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_volumes_get(self, subscription_id, **kwargs):  # noqa: E501
        """Gets list of all volumes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volumes_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str availability_zone_id: Availability zone to filter by
        :param str availability_zone: Availability zone to filter by
        :param AwsVolumeStatus status: Volume status to filter by
        :param bool is_os_disk: Filter volumes by isOsDisk value
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AwsVolume]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_volumes_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def aws_service_api_volumes_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Gets list of all volumes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volumes_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param str availability_zone_id: Availability zone to filter by
        :param str availability_zone: Availability zone to filter by
        :param AwsVolumeStatus status: Volume status to filter by
        :param bool is_os_disk: Filter volumes by isOsDisk value
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AwsVolume], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone_id', 'availability_zone', 'status', 'is_os_disk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_volumes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_volumes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'is_os_disk' in local_var_params:
            query_params.append(('isOsDisk', local_var_params['is_os_disk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AwsVolume]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aws_service_api_volumes_post(self, subscription_id, aws_create_volume_params, **kwargs):  # noqa: E501
        """Creates a new EBS volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volumes_post(subscription_id, aws_create_volume_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsCreateVolumeParams aws_create_volume_params: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AwsVolume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.aws_service_api_volumes_post_with_http_info(subscription_id, aws_create_volume_params, **kwargs)  # noqa: E501

    def aws_service_api_volumes_post_with_http_info(self, subscription_id, aws_create_volume_params, **kwargs):  # noqa: E501
        """Creates a new EBS volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aws_service_api_volumes_post_with_http_info(subscription_id, aws_create_volume_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of a subscription (required)
        :param AwsCreateVolumeParams aws_create_volume_params: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AwsVolume, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'aws_create_volume_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aws_service_api_volumes_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `aws_service_api_volumes_post`")  # noqa: E501
        # verify the required parameter 'aws_create_volume_params' is set
        if ('aws_create_volume_params' not in local_var_params or
                local_var_params['aws_create_volume_params'] is None):
            raise ApiValueError("Missing the required parameter `aws_create_volume_params` when calling `aws_service_api_volumes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_create_volume_params' in local_var_params:
            body_params = local_var_params['aws_create_volume_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/aws/compute/volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsVolume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
