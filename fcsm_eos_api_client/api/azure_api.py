# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fcsm_eos_api_client.api_client import ApiClient
from fcsm_eos_api_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class AzureApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def azure_service_api_availability_set_get(self, subscription_id, availability_set_id, **kwargs):  # noqa: E501
        """Gets availability set by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_availability_set_get(subscription_id, availability_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str availability_set_id: Availability Set ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureAvailabilitySet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_availability_set_get_with_http_info(subscription_id, availability_set_id, **kwargs)  # noqa: E501

    def azure_service_api_availability_set_get_with_http_info(self, subscription_id, availability_set_id, **kwargs):  # noqa: E501
        """Gets availability set by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_availability_set_get_with_http_info(subscription_id, availability_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str availability_set_id: Availability Set ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureAvailabilitySet, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_availability_set_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_availability_set_get`")  # noqa: E501
        # verify the required parameter 'availability_set_id' is set
        if ('availability_set_id' not in local_var_params or
                local_var_params['availability_set_id'] is None):
            raise ApiValueError("Missing the required parameter `availability_set_id` when calling `azure_service_api_availability_set_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'availability_set_id' in local_var_params:
            path_params['availability_set_id'] = local_var_params['availability_set_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/availabilitySets/{availability_set_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureAvailabilitySet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_availability_sets_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists availability sets for specified subscription and resource group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_availability_sets_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureAvailabilitySet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_availability_sets_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_availability_sets_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists availability sets for specified subscription and resource group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_availability_sets_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureAvailabilitySet], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_availability_sets_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_availability_sets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/availabilitySets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureAvailabilitySet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_availability_zone_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists availability zones for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_availability_zone_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureAvailabilityZone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_availability_zone_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_availability_zone_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists availability zones for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_availability_zone_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureAvailabilityZone], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_availability_zone_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_availability_zone_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/availabilityZones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureAvailabilityZone]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_flavor_get(self, subscription_id, flavor_id, **kwargs):  # noqa: E501
        """Gets a single flavor by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_flavor_get(subscription_id, flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str flavor_id: ID of Flavor (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureFlavor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_flavor_get_with_http_info(subscription_id, flavor_id, **kwargs)  # noqa: E501

    def azure_service_api_flavor_get_with_http_info(self, subscription_id, flavor_id, **kwargs):  # noqa: E501
        """Gets a single flavor by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_flavor_get_with_http_info(subscription_id, flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str flavor_id: ID of Flavor (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureFlavor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'flavor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_flavor_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_flavor_get`")  # noqa: E501
        # verify the required parameter 'flavor_id' is set
        if ('flavor_id' not in local_var_params or
                local_var_params['flavor_id'] is None):
            raise ApiValueError("Missing the required parameter `flavor_id` when calling `azure_service_api_flavor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor_id' in local_var_params:
            path_params['flavor_id'] = local_var_params['flavor_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/flavors/{flavor_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureFlavor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_flavors_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists flavors for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_flavors_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureFlavor]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_flavors_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_flavors_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists flavors for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_flavors_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureFlavor], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_flavors_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_flavors_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/flavors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureFlavor]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_image_get(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets a single image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_image_get(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzurePublicPrivateImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_image_get_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def azure_service_api_image_get_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets a single image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_image_get_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzurePublicPrivateImage, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_image_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_image_get`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `azure_service_api_image_get`")  # noqa: E501

        if ('image_id' in local_var_params and
                len(local_var_params['image_id']) < 1):
            raise ApiValueError("Invalid value for parameter `image_id` when calling `azure_service_api_image_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['image_id'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/images/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzurePublicPrivateImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_interfaces_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists interfaces for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_interfaces_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: Vm id to filter by
        :param str network_id: Network id to filter by
        :param str subnet_id: Subnet id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureInterface]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_interfaces_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_interfaces_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists interfaces for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_interfaces_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: Vm id to filter by
        :param str network_id: Network id to filter by
        :param str subnet_id: Subnet id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureInterface], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'network_id', 'subnet_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_interfaces_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_interfaces_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501
        if 'network_id' in local_var_params:
            query_params.append(('networkId', local_var_params['network_id']))  # noqa: E501
        if 'subnet_id' in local_var_params:
            query_params.append(('subnetId', local_var_params['subnet_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureInterface]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_keypair_delete(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Delets a single keypair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypair_delete(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str keypair_id: Id of the keypair (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_keypair_delete_with_http_info(subscription_id, keypair_id, **kwargs)  # noqa: E501

    def azure_service_api_keypair_delete_with_http_info(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Delets a single keypair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypair_delete_with_http_info(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str keypair_id: Id of the keypair (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'keypair_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_keypair_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_keypair_delete`")  # noqa: E501
        # verify the required parameter 'keypair_id' is set
        if ('keypair_id' not in local_var_params or
                local_var_params['keypair_id'] is None):
            raise ApiValueError("Missing the required parameter `keypair_id` when calling `azure_service_api_keypair_delete`")  # noqa: E501

        if ('keypair_id' in local_var_params and
                len(local_var_params['keypair_id']) > 60):
            raise ApiValueError("Invalid value for parameter `keypair_id` when calling `azure_service_api_keypair_delete`, length must be less than or equal to `60`")  # noqa: E501
        if ('keypair_id' in local_var_params and
                len(local_var_params['keypair_id']) < 1):
            raise ApiValueError("Invalid value for parameter `keypair_id` when calling `azure_service_api_keypair_delete`, length must be greater than or equal to `1`")  # noqa: E501
        if 'keypair_id' in local_var_params and not re.search(r'^[a-zA-Z0-9_-]+$', local_var_params['keypair_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `keypair_id` when calling `azure_service_api_keypair_delete`, must conform to the pattern `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'keypair_id' in local_var_params:
            path_params['keypair_id'] = local_var_params['keypair_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/keypairs/{keypair_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_keypair_generate_post(self, subscription_id, azure_keypair_generate, **kwargs):  # noqa: E501
        """Generate a new keypair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypair_generate_post(subscription_id, azure_keypair_generate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureKeypairGenerate azure_keypair_generate: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureGeneratedKeypair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_keypair_generate_post_with_http_info(subscription_id, azure_keypair_generate, **kwargs)  # noqa: E501

    def azure_service_api_keypair_generate_post_with_http_info(self, subscription_id, azure_keypair_generate, **kwargs):  # noqa: E501
        """Generate a new keypair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypair_generate_post_with_http_info(subscription_id, azure_keypair_generate, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureKeypairGenerate azure_keypair_generate: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureGeneratedKeypair, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'azure_keypair_generate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_keypair_generate_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_keypair_generate_post`")  # noqa: E501
        # verify the required parameter 'azure_keypair_generate' is set
        if ('azure_keypair_generate' not in local_var_params or
                local_var_params['azure_keypair_generate'] is None):
            raise ApiValueError("Missing the required parameter `azure_keypair_generate` when calling `azure_service_api_keypair_generate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_keypair_generate' in local_var_params:
            body_params = local_var_params['azure_keypair_generate']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/keypairs/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureGeneratedKeypair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_keypair_get(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Gets a single keypair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypair_get(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str keypair_id: Id of the keypair (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureKeypair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_keypair_get_with_http_info(subscription_id, keypair_id, **kwargs)  # noqa: E501

    def azure_service_api_keypair_get_with_http_info(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Gets a single keypair  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypair_get_with_http_info(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str keypair_id: Id of the keypair (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureKeypair, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'keypair_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_keypair_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_keypair_get`")  # noqa: E501
        # verify the required parameter 'keypair_id' is set
        if ('keypair_id' not in local_var_params or
                local_var_params['keypair_id'] is None):
            raise ApiValueError("Missing the required parameter `keypair_id` when calling `azure_service_api_keypair_get`")  # noqa: E501

        if ('keypair_id' in local_var_params and
                len(local_var_params['keypair_id']) > 60):
            raise ApiValueError("Invalid value for parameter `keypair_id` when calling `azure_service_api_keypair_get`, length must be less than or equal to `60`")  # noqa: E501
        if ('keypair_id' in local_var_params and
                len(local_var_params['keypair_id']) < 1):
            raise ApiValueError("Invalid value for parameter `keypair_id` when calling `azure_service_api_keypair_get`, length must be greater than or equal to `1`")  # noqa: E501
        if 'keypair_id' in local_var_params and not re.search(r'^[a-zA-Z0-9_-]+$', local_var_params['keypair_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `keypair_id` when calling `azure_service_api_keypair_get`, must conform to the pattern `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'keypair_id' in local_var_params:
            path_params['keypair_id'] = local_var_params['keypair_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/keypairs/{keypair_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureKeypair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_keypair_import_post(self, subscription_id, azure_keypair_import, **kwargs):  # noqa: E501
        """Import a public key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypair_import_post(subscription_id, azure_keypair_import, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureKeypairImport azure_keypair_import: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureKeypair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_keypair_import_post_with_http_info(subscription_id, azure_keypair_import, **kwargs)  # noqa: E501

    def azure_service_api_keypair_import_post_with_http_info(self, subscription_id, azure_keypair_import, **kwargs):  # noqa: E501
        """Import a public key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypair_import_post_with_http_info(subscription_id, azure_keypair_import, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureKeypairImport azure_keypair_import: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureKeypair, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'azure_keypair_import']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_keypair_import_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_keypair_import_post`")  # noqa: E501
        # verify the required parameter 'azure_keypair_import' is set
        if ('azure_keypair_import' not in local_var_params or
                local_var_params['azure_keypair_import'] is None):
            raise ApiValueError("Missing the required parameter `azure_keypair_import` when calling `azure_service_api_keypair_import_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_keypair_import' in local_var_params:
            body_params = local_var_params['azure_keypair_import']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/keypairs/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureKeypair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_keypairs_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists keypairs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypairs_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str availability_zone: Availibility zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureKeypair]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_keypairs_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_keypairs_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists keypairs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_keypairs_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str availability_zone: Availibility zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureKeypair], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_keypairs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_keypairs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/keypairs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureKeypair]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_network_subnets_get(self, subscription_id, network_id, **kwargs):  # noqa: E501
        """Lists subnets for specified network and subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_network_subnets_get(subscription_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str network_id: ID of network (required)
        :param str availability_zone: Availibility zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureSubnet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_network_subnets_get_with_http_info(subscription_id, network_id, **kwargs)  # noqa: E501

    def azure_service_api_network_subnets_get_with_http_info(self, subscription_id, network_id, **kwargs):  # noqa: E501
        """Lists subnets for specified network and subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_network_subnets_get_with_http_info(subscription_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str network_id: ID of network (required)
        :param str availability_zone: Availibility zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureSubnet], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'network_id', 'availability_zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_network_subnets_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_network_subnets_get`")  # noqa: E501
        # verify the required parameter 'network_id' is set
        if ('network_id' not in local_var_params or
                local_var_params['network_id'] is None):
            raise ApiValueError("Missing the required parameter `network_id` when calling `azure_service_api_network_subnets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'network_id' in local_var_params:
            path_params['network_id'] = local_var_params['network_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/networks/{network_id}/subnets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureSubnet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_networks_get(self, subscription_id, **kwargs):  # noqa: E501
        """List networks for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_networks_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str availability_zone: Availibility zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureNetwork]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_networks_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_networks_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List networks for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_networks_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str availability_zone: Availibility zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureNetwork], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_networks_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_networks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/networks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureNetwork]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_private_image_get(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets a single private image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_private_image_get(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_private_image_get_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def azure_service_api_private_image_get_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets a single private image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_private_image_get_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_private_image_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_private_image_get`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `azure_service_api_private_image_get`")  # noqa: E501

        if ('image_id' in local_var_params and
                len(local_var_params['image_id']) < 1):
            raise ApiValueError("Invalid value for parameter `image_id` when calling `azure_service_api_private_image_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['image_id'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/privateImages/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_private_images_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists private images for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_private_images_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str name: Full/partial name of an image to look for
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzurePublicPrivateImage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_private_images_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_private_images_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists private images for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_private_images_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str name: Full/partial name of an image to look for
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzurePublicPrivateImage], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_private_images_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_private_images_get`")  # noqa: E501

        if ('name' in local_var_params and
                len(local_var_params['name']) < 1):
            raise ApiValueError("Invalid value for parameter `name` when calling `azure_service_api_private_images_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/privateImages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzurePublicPrivateImage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_public_image_get(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets a single public image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_public_image_get(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzurePublicPrivateImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_public_image_get_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def azure_service_api_public_image_get_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Gets a single public image by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_public_image_get_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzurePublicPrivateImage, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_public_image_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_public_image_get`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `azure_service_api_public_image_get`")  # noqa: E501

        if ('image_id' in local_var_params and
                len(local_var_params['image_id']) < 1):
            raise ApiValueError("Invalid value for parameter `image_id` when calling `azure_service_api_public_image_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['image_id'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/publicImages/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzurePublicPrivateImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_public_images_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists all public images for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_public_images_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str name: Full/partial name of an image to look for
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzurePublicPrivateImage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_public_images_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_public_images_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists all public images for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_public_images_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str name: Full/partial name of an image to look for
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzurePublicPrivateImage], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_public_images_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_public_images_get`")  # noqa: E501

        if ('name' in local_var_params and
                len(local_var_params['name']) < 1):
            raise ApiValueError("Invalid value for parameter `name` when calling `azure_service_api_public_images_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/publicImages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzurePublicPrivateImage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_regions_get(self, **kwargs):  # noqa: E501
        """Lists regions  # noqa: E501

        If subscriptionId is not passed as query parameters endpoint returns list of regions not scoped to any subscription. Otherwise it returns regions for specified subscription.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_regions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Optional ID of subscription
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureRegion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_regions_get_with_http_info(**kwargs)  # noqa: E501

    def azure_service_api_regions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Lists regions  # noqa: E501

        If subscriptionId is not passed as query parameters endpoint returns list of regions not scoped to any subscription. Otherwise it returns regions for specified subscription.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_regions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Optional ID of subscription
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureRegion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_regions_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureRegion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_resource_groups_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists resource groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_resource_groups_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureResourceGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_resource_groups_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_resource_groups_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists resource groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_resource_groups_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureResourceGroup], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_resource_groups_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_resource_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/resourceGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureResourceGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_resource_groups_post(self, subscription_id, azure_create_resource_group, **kwargs):  # noqa: E501
        """Creates new resource group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_resource_groups_post(subscription_id, azure_create_resource_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureCreateResourceGroup azure_create_resource_group: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureResourceGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_resource_groups_post_with_http_info(subscription_id, azure_create_resource_group, **kwargs)  # noqa: E501

    def azure_service_api_resource_groups_post_with_http_info(self, subscription_id, azure_create_resource_group, **kwargs):  # noqa: E501
        """Creates new resource group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_resource_groups_post_with_http_info(subscription_id, azure_create_resource_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureCreateResourceGroup azure_create_resource_group: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureResourceGroup, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'azure_create_resource_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_resource_groups_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_resource_groups_post`")  # noqa: E501
        # verify the required parameter 'azure_create_resource_group' is set
        if ('azure_create_resource_group' not in local_var_params or
                local_var_params['azure_create_resource_group'] is None):
            raise ApiValueError("Missing the required parameter `azure_create_resource_group` when calling `azure_service_api_resource_groups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_create_resource_group' in local_var_params:
            body_params = local_var_params['azure_create_resource_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/resourceGroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureResourceGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_security_groups_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists security groups for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_security_groups_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: Vm id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureSecurityGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_security_groups_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_security_groups_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists security groups for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_security_groups_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: Vm id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureSecurityGroup], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_security_groups_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_security_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/securityGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureSecurityGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_snapshot_delete(self, subscription_id, snapshot_id, **kwargs):  # noqa: E501
        """Delete snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_snapshot_delete(subscription_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str snapshot_id: snapshot ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_snapshot_delete_with_http_info(subscription_id, snapshot_id, **kwargs)  # noqa: E501

    def azure_service_api_snapshot_delete_with_http_info(self, subscription_id, snapshot_id, **kwargs):  # noqa: E501
        """Delete snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_snapshot_delete_with_http_info(subscription_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str snapshot_id: snapshot ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'snapshot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_snapshot_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_snapshot_delete`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in local_var_params or
                local_var_params['snapshot_id'] is None):
            raise ApiValueError("Missing the required parameter `snapshot_id` when calling `azure_service_api_snapshot_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'snapshot_id' in local_var_params:
            path_params['snapshot_id'] = local_var_params['snapshot_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/snapshots/{snapshot_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_snapshots_get(self, subscription_id, **kwargs):  # noqa: E501
        """Get list of all snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_snapshots_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: Vm id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureSnapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_snapshots_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_snapshots_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Get list of all snapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_snapshots_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: Vm id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureSnapshot], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_snapshots_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_snapshots_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/snapshots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureSnapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_snapshots_post(self, subscription_id, azure_create_snapshot, **kwargs):  # noqa: E501
        """Create a new snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_snapshots_post(subscription_id, azure_create_snapshot, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureCreateSnapshot azure_create_snapshot: A create snapshot object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_snapshots_post_with_http_info(subscription_id, azure_create_snapshot, **kwargs)  # noqa: E501

    def azure_service_api_snapshots_post_with_http_info(self, subscription_id, azure_create_snapshot, **kwargs):  # noqa: E501
        """Create a new snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_snapshots_post_with_http_info(subscription_id, azure_create_snapshot, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureCreateSnapshot azure_create_snapshot: A create snapshot object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureSnapshot, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'azure_create_snapshot']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_snapshots_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_snapshots_post`")  # noqa: E501
        # verify the required parameter 'azure_create_snapshot' is set
        if ('azure_create_snapshot' not in local_var_params or
                local_var_params['azure_create_snapshot'] is None):
            raise ApiValueError("Missing the required parameter `azure_create_snapshot` when calling `azure_service_api_snapshots_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_create_snapshot' in local_var_params:
            body_params = local_var_params['azure_create_snapshot']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_validate_subscription_post(self, azure_subscription, **kwargs):  # noqa: E501
        """Validate subscription credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_validate_subscription_post(azure_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AzureSubscription azure_subscription: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_validate_subscription_post_with_http_info(azure_subscription, **kwargs)  # noqa: E501

    def azure_service_api_validate_subscription_post_with_http_info(self, azure_subscription, **kwargs):  # noqa: E501
        """Validate subscription credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_validate_subscription_post_with_http_info(azure_subscription, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AzureSubscription azure_subscription: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['azure_subscription']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_validate_subscription_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'azure_subscription' is set
        if ('azure_subscription' not in local_var_params or
                local_var_params['azure_subscription'] is None):
            raise ApiValueError("Missing the required parameter `azure_subscription` when calling `azure_service_api_validate_subscription_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_subscription' in local_var_params:
            body_params = local_var_params['azure_subscription']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/validateSubscription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_command_put(self, subscription_id, vm_id, action, **kwargs):  # noqa: E501
        """Executes power action on a VM  # noqa: E501

        Executes power action on a VM. Only specified VMPowerAction are allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_command_put(subscription_id, vm_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureVMPowerAction action: Commands for the VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_command_put_with_http_info(subscription_id, vm_id, action, **kwargs)  # noqa: E501

    def azure_service_api_vm_command_put_with_http_info(self, subscription_id, vm_id, action, **kwargs):  # noqa: E501
        """Executes power action on a VM  # noqa: E501

        Executes power action on a VM. Only specified VMPowerAction are allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_command_put_with_http_info(subscription_id, vm_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureVMPowerAction action: Commands for the VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_command_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_command_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_command_put`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in local_var_params or
                local_var_params['action'] is None):
            raise ApiValueError("Missing the required parameter `action` when calling `azure_service_api_vm_command_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501
        if 'action' in local_var_params:
            path_params['action'] = local_var_params['action']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/command/{action}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_delete(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Deletes a single virtual machine by ID  # noqa: E501

        Endpoint takes care of deleting the virtual machine from the platform. It also removes:  - OS volume - all network interfaces - management if VM was managed by management tool - workshift if VM had one - initial password if VM was provisioned with one   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_delete(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_delete_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_delete_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Deletes a single virtual machine by ID  # noqa: E501

        Endpoint takes care of deleting the virtual machine from the platform. It also removes:  - OS volume - all network interfaces - management if VM was managed by management tool - workshift if VM had one - initial password if VM was provisioned with one   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_delete_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_details_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets specified virtual machine details  # noqa: E501

        If specified virtual machine is provision with enabled management details will contain information gathered by management tool. Aither way it will contains basic information   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_details_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureVmDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_details_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_details_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets specified virtual machine details  # noqa: E501

        If specified virtual machine is provision with enabled management details will contain information gathered by management tool. Aither way it will contains basic information   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_details_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureVmDetails], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_details_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_details_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureVmDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_floating_ip_delete(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Unassigns floating public IP from specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_floating_ip_delete(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_floating_ip_delete_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_floating_ip_delete_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Unassigns floating public IP from specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_floating_ip_delete_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_floating_ip_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_floating_ip_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_floating_ip_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/unassignFloatingIp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_floating_ip_put(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Assigns a floating public IP v4 to specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_floating_ip_put(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureVmFloatingIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_floating_ip_put_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_floating_ip_put_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Assigns a floating public IP v4 to specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_floating_ip_put_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureVmFloatingIp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_floating_ip_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_floating_ip_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_floating_ip_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/assignFloatingIp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureVmFloatingIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets a single virtual machine by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureVMExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets a single virtual machine by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureVMExtended, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureVMExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_management_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets specified virtual machine management status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_management_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureManagementStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_management_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_management_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets specified virtual machine management status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_management_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureManagementStatus, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_management_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_management_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_management_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/management', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureManagementStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_password_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets specified virtual machine encrypted password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_password_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureEncryptedPassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_password_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_password_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Gets specified virtual machine encrypted password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_password_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureEncryptedPassword, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_password_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_password_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_password_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureEncryptedPassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_patch(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Modifies specified virtual machine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_patch(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureVMPatch azure_vm_patch: Virtual machine object to modify
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_patch_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_patch_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Modifies specified virtual machine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_patch_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureVMPatch azure_vm_patch: Virtual machine object to modify
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'azure_vm_patch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_patch`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_vm_patch' in local_var_params:
            body_params = local_var_params['azure_vm_patch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_security_groups_delete(self, subscription_id, vm_id, security_group_id, **kwargs):  # noqa: E501
        """Unassigns specified security group from specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_security_groups_delete(subscription_id, vm_id, security_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param str security_group_id: Security group id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_security_groups_delete_with_http_info(subscription_id, vm_id, security_group_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_security_groups_delete_with_http_info(self, subscription_id, vm_id, security_group_id, **kwargs):  # noqa: E501
        """Unassigns specified security group from specified VM  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_security_groups_delete_with_http_info(subscription_id, vm_id, security_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param str security_group_id: Security group id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'security_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_security_groups_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_security_groups_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_security_groups_delete`")  # noqa: E501
        # verify the required parameter 'security_group_id' is set
        if ('security_group_id' not in local_var_params or
                local_var_params['security_group_id'] is None):
            raise ApiValueError("Missing the required parameter `security_group_id` when calling `azure_service_api_vm_security_groups_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501
        if 'security_group_id' in local_var_params:
            path_params['security_group_id'] = local_var_params['security_group_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/securityGroups/{security_group_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_security_groups_put(self, subscription_id, vm_id, security_group_id, **kwargs):  # noqa: E501
        """Assigns a new network security group and unassigns old one  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_security_groups_put(subscription_id, vm_id, security_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param str security_group_id: Security group id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_security_groups_put_with_http_info(subscription_id, vm_id, security_group_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_security_groups_put_with_http_info(self, subscription_id, vm_id, security_group_id, **kwargs):  # noqa: E501
        """Assigns a new network security group and unassigns old one  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_security_groups_put_with_http_info(subscription_id, vm_id, security_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param str security_group_id: Security group id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'security_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_security_groups_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_security_groups_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_security_groups_put`")  # noqa: E501
        # verify the required parameter 'security_group_id' is set
        if ('security_group_id' not in local_var_params or
                local_var_params['security_group_id'] is None):
            raise ApiValueError("Missing the required parameter `security_group_id` when calling `azure_service_api_vm_security_groups_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501
        if 'security_group_id' in local_var_params:
            path_params['security_group_id'] = local_var_params['security_group_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/securityGroups/{security_group_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_tag_put(self, subscription_id, vm_id, azure_tag_update, **kwargs):  # noqa: E501
        """Sets/unsets tag in virtual machine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_tag_put(subscription_id, vm_id, azure_tag_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureTagUpdate azure_tag_update: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_tag_put_with_http_info(subscription_id, vm_id, azure_tag_update, **kwargs)  # noqa: E501

    def azure_service_api_vm_tag_put_with_http_info(self, subscription_id, vm_id, azure_tag_update, **kwargs):  # noqa: E501
        """Sets/unsets tag in virtual machine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_tag_put_with_http_info(subscription_id, vm_id, azure_tag_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureTagUpdate azure_tag_update: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'azure_tag_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_tag_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_tag_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_tag_put`")  # noqa: E501
        # verify the required parameter 'azure_tag_update' is set
        if ('azure_tag_update' not in local_var_params or
                local_var_params['azure_tag_update'] is None):
            raise ApiValueError("Missing the required parameter `azure_tag_update` when calling `azure_service_api_vm_tag_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_tag_update' in local_var_params:
            body_params = local_var_params['azure_tag_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/setTag', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_workshift_delete(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Delete VM Workshift  # noqa: E501

        Delete VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_workshift_delete(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_workshift_delete_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_vm_workshift_delete_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Delete VM Workshift  # noqa: E501

        Delete VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_workshift_delete_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_workshift_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_workshift_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_workshift_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/workshift', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_workshift_post(self, subscription_id, vm_id, azure_workshift, **kwargs):  # noqa: E501
        """Add a workshift to the VM  # noqa: E501

        Create a VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_workshift_post(subscription_id, vm_id, azure_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureWorkshift azure_workshift: Workshift object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureWorkshift
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_workshift_post_with_http_info(subscription_id, vm_id, azure_workshift, **kwargs)  # noqa: E501

    def azure_service_api_vm_workshift_post_with_http_info(self, subscription_id, vm_id, azure_workshift, **kwargs):  # noqa: E501
        """Add a workshift to the VM  # noqa: E501

        Create a VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_workshift_post_with_http_info(subscription_id, vm_id, azure_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureWorkshift azure_workshift: Workshift object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureWorkshift, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'azure_workshift']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_workshift_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_workshift_post`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_workshift_post`")  # noqa: E501
        # verify the required parameter 'azure_workshift' is set
        if ('azure_workshift' not in local_var_params or
                local_var_params['azure_workshift'] is None):
            raise ApiValueError("Missing the required parameter `azure_workshift` when calling `azure_service_api_vm_workshift_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_workshift' in local_var_params:
            body_params = local_var_params['azure_workshift']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/workshift', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureWorkshift',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vm_workshift_put(self, subscription_id, vm_id, azure_workshift, **kwargs):  # noqa: E501
        """Update VM Workshift  # noqa: E501

        Update a VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_workshift_put(subscription_id, vm_id, azure_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureWorkshift azure_workshift: Workshift object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureWorkshift
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vm_workshift_put_with_http_info(subscription_id, vm_id, azure_workshift, **kwargs)  # noqa: E501

    def azure_service_api_vm_workshift_put_with_http_info(self, subscription_id, vm_id, azure_workshift, **kwargs):  # noqa: E501
        """Update VM Workshift  # noqa: E501

        Update a VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vm_workshift_put_with_http_info(subscription_id, vm_id, azure_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str vm_id: ID of VM (required)
        :param AzureWorkshift azure_workshift: Workshift object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureWorkshift, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'azure_workshift']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vm_workshift_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vm_workshift_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_vm_workshift_put`")  # noqa: E501
        # verify the required parameter 'azure_workshift' is set
        if ('azure_workshift' not in local_var_params or
                local_var_params['azure_workshift'] is None):
            raise ApiValueError("Missing the required parameter `azure_workshift` when calling `azure_service_api_vm_workshift_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vm_id'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_workshift' in local_var_params:
            body_params = local_var_params['azure_workshift']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms/{vm_id}/workshift', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureWorkshift',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vms_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists virtual machines for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vms_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str availability_set_id: Availability Set ID
        :param str availability_zone_id: Availibility zone id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureVMSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vms_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_vms_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists virtual machines for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vms_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str availability_set_id: Availability Set ID
        :param str availability_zone_id: Availibility zone id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureVMSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_set_id', 'availability_zone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vms_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_set_id' in local_var_params:
            query_params.append(('availabilitySetId', local_var_params['availability_set_id']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureVMSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_vms_post(self, subscription_id, **kwargs):  # noqa: E501
        """Provisions virtual machine according to specified parameters  # noqa: E501

        May provision managed or unmanaged virtual machine in accordance to the `managementToolId` property. If such is set and points to valid `management tool`, virtual machine will have aformentioned tool deployed and it will be possible to install the application on it.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vms_post(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureVMCreateData azure_vm_create_data: Parameters for the new virtual machine
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureVMExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_vms_post_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_vms_post_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Provisions virtual machine according to specified parameters  # noqa: E501

        May provision managed or unmanaged virtual machine in accordance to the `managementToolId` property. If such is set and points to valid `management tool`, virtual machine will have aformentioned tool deployed and it will be possible to install the application on it.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_vms_post_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureVMCreateData azure_vm_create_data: Parameters for the new virtual machine
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureVMExtended, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'azure_vm_create_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_vms_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_vms_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_vm_create_data' in local_var_params:
            body_params = local_var_params['azure_vm_create_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/vms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureVMExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_volume_attachment_delete(self, subscription_id, volume_id, vm_id, **kwargs):  # noqa: E501
        """Dettaches volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_attachment_delete(subscription_id, volume_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param str vm_id: ID of VM in query string (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_volume_attachment_delete_with_http_info(subscription_id, volume_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_volume_attachment_delete_with_http_info(self, subscription_id, volume_id, vm_id, **kwargs):  # noqa: E501
        """Dettaches volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_attachment_delete_with_http_info(subscription_id, volume_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param str vm_id: ID of VM in query string (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_volume_attachment_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_volume_attachment_delete`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `azure_service_api_volume_attachment_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_volume_attachment_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/volumes/{volume_id}/detach', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_volume_attachment_put(self, subscription_id, volume_id, vm_id, **kwargs):  # noqa: E501
        """Attaches volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_attachment_put(subscription_id, volume_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param str vm_id: ID of VM in query string (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureVolumeAttachment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_volume_attachment_put_with_http_info(subscription_id, volume_id, vm_id, **kwargs)  # noqa: E501

    def azure_service_api_volume_attachment_put_with_http_info(self, subscription_id, volume_id, vm_id, **kwargs):  # noqa: E501
        """Attaches volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_attachment_put_with_http_info(subscription_id, volume_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param str vm_id: ID of VM in query string (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureVolumeAttachment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_volume_attachment_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_volume_attachment_put`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `azure_service_api_volume_attachment_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `azure_service_api_volume_attachment_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/volumes/{volume_id}/attach', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureVolumeAttachment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_volume_delete(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Removes volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_delete(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_volume_delete_with_http_info(subscription_id, volume_id, **kwargs)  # noqa: E501

    def azure_service_api_volume_delete_with_http_info(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Removes volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_delete_with_http_info(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_volume_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_volume_delete`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `azure_service_api_volume_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/volumes/{volume_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_volume_get(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Gets a single volume by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_get(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureVolume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_volume_get_with_http_info(subscription_id, volume_id, **kwargs)  # noqa: E501

    def azure_service_api_volume_get_with_http_info(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Gets a single volume by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_get_with_http_info(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureVolume, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_volume_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_volume_get`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `azure_service_api_volume_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/volumes/{volume_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureVolume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_volume_patch(self, subscription_id, volume_id, azure_patch_volume, **kwargs):  # noqa: E501
        """Modify volume properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_patch(subscription_id, volume_id, azure_patch_volume, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param AzurePatchVolume azure_patch_volume: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_volume_patch_with_http_info(subscription_id, volume_id, azure_patch_volume, **kwargs)  # noqa: E501

    def azure_service_api_volume_patch_with_http_info(self, subscription_id, volume_id, azure_patch_volume, **kwargs):  # noqa: E501
        """Modify volume properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_patch_with_http_info(subscription_id, volume_id, azure_patch_volume, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param AzurePatchVolume azure_patch_volume: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id', 'azure_patch_volume']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_volume_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_volume_patch`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `azure_service_api_volume_patch`")  # noqa: E501
        # verify the required parameter 'azure_patch_volume' is set
        if ('azure_patch_volume' not in local_var_params or
                local_var_params['azure_patch_volume'] is None):
            raise ApiValueError("Missing the required parameter `azure_patch_volume` when calling `azure_service_api_volume_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_patch_volume' in local_var_params:
            body_params = local_var_params['azure_patch_volume']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/volumes/{volume_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_volume_types_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists volume types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_types_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param bool is_os_compatible: Filter volumes by OS compatibility
        :param str availability_zone_id: Availibility zone id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureVolumeType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_volume_types_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_volume_types_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists volume types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volume_types_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param bool is_os_compatible: Filter volumes by OS compatibility
        :param str availability_zone_id: Availibility zone id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureVolumeType], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'is_os_compatible', 'availability_zone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_volume_types_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_volume_types_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'is_os_compatible' in local_var_params:
            query_params.append(('isOsCompatible', local_var_params['is_os_compatible']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/volumeTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureVolumeType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_volumes_get(self, subscription_id, **kwargs):  # noqa: E501
        """Lists volumes for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volumes_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureVolumeStatus status: Volume status to filter by
        :param bool is_os_disk: Filter volumes by IsOsDisk value
        :param str availability_zone: Availibility zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AzureVolume]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_volumes_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def azure_service_api_volumes_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Lists volumes for specified subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volumes_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureVolumeStatus status: Volume status to filter by
        :param bool is_os_disk: Filter volumes by IsOsDisk value
        :param str availability_zone: Availibility zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AzureVolume], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'status', 'is_os_disk', 'availability_zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_volumes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_volumes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'is_os_disk' in local_var_params:
            query_params.append(('isOsDisk', local_var_params['is_os_disk']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AzureVolume]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azure_service_api_volumes_post(self, subscription_id, azure_create_volume, **kwargs):  # noqa: E501
        """Creates new volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volumes_post(subscription_id, azure_create_volume, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureCreateVolume azure_create_volume: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AzureVolume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.azure_service_api_volumes_post_with_http_info(subscription_id, azure_create_volume, **kwargs)  # noqa: E501

    def azure_service_api_volumes_post_with_http_info(self, subscription_id, azure_create_volume, **kwargs):  # noqa: E501
        """Creates new volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.azure_service_api_volumes_post_with_http_info(subscription_id, azure_create_volume, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: ID of subscription (required)
        :param AzureCreateVolume azure_create_volume: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AzureVolume, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'azure_create_volume']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azure_service_api_volumes_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `azure_service_api_volumes_post`")  # noqa: E501
        # verify the required parameter 'azure_create_volume' is set
        if ('azure_create_volume' not in local_var_params or
                local_var_params['azure_create_volume'] is None):
            raise ApiValueError("Missing the required parameter `azure_create_volume` when calling `azure_service_api_volumes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_create_volume' in local_var_params:
            body_params = local_var_params['azure_create_volume']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/azure/compute/volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureVolume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
