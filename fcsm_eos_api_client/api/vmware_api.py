# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fcsm_eos_api_client.api_client import ApiClient
from fcsm_eos_api_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class VmwareApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def vmware_service_resources_availability_zones_get(self, subscription_id, **kwargs):  # noqa: E501
        """List availability zones  # noqa: E501

        List all Availability Zones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_availability_zones_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareAvailabilityZone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_availability_zones_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_availability_zones_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List availability zones  # noqa: E501

        List all Availability Zones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_availability_zones_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareAvailabilityZone], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_availability_zones_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_availability_zones_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/availabilityZones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareAvailabilityZone]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_flavor_get(self, subscription_id, flavor_id, **kwargs):  # noqa: E501
        """Get flavor by id  # noqa: E501

        Get specific flavor by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_flavor_get(subscription_id, flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str flavor_id: Flavor id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareFlavor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_flavor_get_with_http_info(subscription_id, flavor_id, **kwargs)  # noqa: E501

    def vmware_service_resources_flavor_get_with_http_info(self, subscription_id, flavor_id, **kwargs):  # noqa: E501
        """Get flavor by id  # noqa: E501

        Get specific flavor by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_flavor_get_with_http_info(subscription_id, flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str flavor_id: Flavor id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareFlavor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'flavor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_flavor_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_flavor_get`")  # noqa: E501
        # verify the required parameter 'flavor_id' is set
        if ('flavor_id' not in local_var_params or
                local_var_params['flavor_id'] is None):
            raise ApiValueError("Missing the required parameter `flavor_id` when calling `vmware_service_resources_flavor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor_id' in local_var_params:
            path_params['flavorId'] = local_var_params['flavor_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/flavors/{flavorId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareFlavor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_flavors_get(self, subscription_id, **kwargs):  # noqa: E501
        """List flavors  # noqa: E501

        Get the list of all flavors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_flavors_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareFlavor]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_flavors_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_flavors_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List flavors  # noqa: E501

        Get the list of all flavors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_flavors_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareFlavor], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_flavors_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_flavors_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/flavors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareFlavor]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_image_get(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Get image by id  # noqa: E501

        Get specific images by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_image_get(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_image_get_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def vmware_service_resources_image_get_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Get image by id  # noqa: E501

        Get specific images by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_image_get_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareImage, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_image_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_image_get`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `vmware_service_resources_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['imageId'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/images/{imageId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_image_get_private(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Get private image by id  # noqa: E501

        Get specific private image by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_image_get_private(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_image_get_private_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def vmware_service_resources_image_get_private_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Get private image by id  # noqa: E501

        Get specific private image by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_image_get_private_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_image_get_private" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_image_get_private`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `vmware_service_resources_image_get_private`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['imageId'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/privateImages/{imageId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_image_get_public(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Get public image by id  # noqa: E501

        Get specific public image by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_image_get_public(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str image_id: Image id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_image_get_public_with_http_info(subscription_id, image_id, **kwargs)  # noqa: E501

    def vmware_service_resources_image_get_public_with_http_info(self, subscription_id, image_id, **kwargs):  # noqa: E501
        """Get public image by id  # noqa: E501

        Get specific public image by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_image_get_public_with_http_info(subscription_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str image_id: Image id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareImage, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_image_get_public" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_image_get_public`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in local_var_params or
                local_var_params['image_id'] is None):
            raise ApiValueError("Missing the required parameter `image_id` when calling `vmware_service_resources_image_get_public`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in local_var_params:
            path_params['imageId'] = local_var_params['image_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/publicImages/{imageId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_images_get(self, subscription_id, **kwargs):  # noqa: E501
        """Get images  # noqa: E501

        The endpoint is used only by the analytics service and should be deprecated in favor of whitelist/images.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_images_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str name: Name of the image to filter
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwarePublicPrivateImage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_images_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_images_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Get images  # noqa: E501

        The endpoint is used only by the analytics service and should be deprecated in favor of whitelist/images.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_images_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str name: Name of the image to filter
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwarePublicPrivateImage], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_images_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_images_get`")  # noqa: E501

        if ('name' in local_var_params and
                len(local_var_params['name']) < 1):
            raise ApiValueError("Invalid value for parameter `name` when calling `vmware_service_resources_images_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwarePublicPrivateImage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_images_get_private(self, subscription_id, **kwargs):  # noqa: E501
        """Get private images  # noqa: E501

        Get private images  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_images_get_private(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str name: Name of the image to filter
        :param str id: Image id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwarePublicPrivateImage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_images_get_private_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_images_get_private_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Get private images  # noqa: E501

        Get private images  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_images_get_private_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str name: Name of the image to filter
        :param str id: Image id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwarePublicPrivateImage], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_images_get_private" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_images_get_private`")  # noqa: E501

        if ('name' in local_var_params and
                len(local_var_params['name']) < 1):
            raise ApiValueError("Invalid value for parameter `name` when calling `vmware_service_resources_images_get_private`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/privateImages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwarePublicPrivateImage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_images_get_public(self, subscription_id, **kwargs):  # noqa: E501
        """Get public images  # noqa: E501

        Get public images  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_images_get_public(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str name: Name of the image to filter
        :param str id: Image id to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwarePublicPrivateImage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_images_get_public_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_images_get_public_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Get public images  # noqa: E501

        Get public images  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_images_get_public_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str name: Name of the image to filter
        :param str id: Image id to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwarePublicPrivateImage], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_images_get_public" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_images_get_public`")  # noqa: E501

        if ('name' in local_var_params and
                len(local_var_params['name']) < 1):
            raise ApiValueError("Invalid value for parameter `name` when calling `vmware_service_resources_images_get_public`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/publicImages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwarePublicPrivateImage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_interfaces_get(self, subscription_id, **kwargs):  # noqa: E501
        """List network interfaces  # noqa: E501

        List of network interfaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_interfaces_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Filter interfaces for VM id
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareInterface]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_interfaces_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_interfaces_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List network interfaces  # noqa: E501

        List of network interfaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_interfaces_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Filter interfaces for VM id
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareInterface], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_interfaces_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_interfaces_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareInterface]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_keypair_delete(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Delete a keypair  # noqa: E501

        Delete a specific keypair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_keypair_delete(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str keypair_id: Keypair id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_keypair_delete_with_http_info(subscription_id, keypair_id, **kwargs)  # noqa: E501

    def vmware_service_resources_keypair_delete_with_http_info(self, subscription_id, keypair_id, **kwargs):  # noqa: E501
        """Delete a keypair  # noqa: E501

        Delete a specific keypair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_keypair_delete_with_http_info(subscription_id, keypair_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str keypair_id: Keypair id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'keypair_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_keypair_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_keypair_delete`")  # noqa: E501
        # verify the required parameter 'keypair_id' is set
        if ('keypair_id' not in local_var_params or
                local_var_params['keypair_id'] is None):
            raise ApiValueError("Missing the required parameter `keypair_id` when calling `vmware_service_resources_keypair_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'keypair_id' in local_var_params:
            path_params['keypairId'] = local_var_params['keypair_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/keypairs/{keypairId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_keypairs_get(self, subscription_id, **kwargs):  # noqa: E501
        """List keypairs  # noqa: E501

        List all keypairs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_keypairs_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareKeypair]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_keypairs_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_keypairs_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List keypairs  # noqa: E501

        List all keypairs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_keypairs_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareKeypair], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_keypairs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_keypairs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/keypairs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareKeypair]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_keypairs_post(self, subscription_id, vmware_generate_keypair, **kwargs):  # noqa: E501
        """Create a new keypair  # noqa: E501

        Create a new keypair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_keypairs_post(subscription_id, vmware_generate_keypair, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareGenerateKeypair vmware_generate_keypair: Keypair data (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareNewKeypair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_keypairs_post_with_http_info(subscription_id, vmware_generate_keypair, **kwargs)  # noqa: E501

    def vmware_service_resources_keypairs_post_with_http_info(self, subscription_id, vmware_generate_keypair, **kwargs):  # noqa: E501
        """Create a new keypair  # noqa: E501

        Create a new keypair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_keypairs_post_with_http_info(subscription_id, vmware_generate_keypair, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareGenerateKeypair vmware_generate_keypair: Keypair data (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareNewKeypair, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vmware_generate_keypair']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_keypairs_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_keypairs_post`")  # noqa: E501
        # verify the required parameter 'vmware_generate_keypair' is set
        if ('vmware_generate_keypair' not in local_var_params or
                local_var_params['vmware_generate_keypair'] is None):
            raise ApiValueError("Missing the required parameter `vmware_generate_keypair` when calling `vmware_service_resources_keypairs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_generate_keypair' in local_var_params:
            body_params = local_var_params['vmware_generate_keypair']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/keypairs/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareNewKeypair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_keypairs_upload(self, subscription_id, vmware_import_keypair, **kwargs):  # noqa: E501
        """Import a keypair  # noqa: E501

        Import a new public keypair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_keypairs_upload(subscription_id, vmware_import_keypair, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareImportKeypair vmware_import_keypair: Public keypair to import (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareKeypair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_keypairs_upload_with_http_info(subscription_id, vmware_import_keypair, **kwargs)  # noqa: E501

    def vmware_service_resources_keypairs_upload_with_http_info(self, subscription_id, vmware_import_keypair, **kwargs):  # noqa: E501
        """Import a keypair  # noqa: E501

        Import a new public keypair  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_keypairs_upload_with_http_info(subscription_id, vmware_import_keypair, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareImportKeypair vmware_import_keypair: Public keypair to import (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareKeypair, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vmware_import_keypair']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_keypairs_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_keypairs_upload`")  # noqa: E501
        # verify the required parameter 'vmware_import_keypair' is set
        if ('vmware_import_keypair' not in local_var_params or
                local_var_params['vmware_import_keypair'] is None):
            raise ApiValueError("Missing the required parameter `vmware_import_keypair` when calling `vmware_service_resources_keypairs_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_import_keypair' in local_var_params:
            body_params = local_var_params['vmware_import_keypair']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/keypairs/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareKeypair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_management_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Get VM management status  # noqa: E501

        Check if management service for the VM is available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_management_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareManagement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_management_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def vmware_service_resources_management_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Get VM management status  # noqa: E501

        Check if management service for the VM is available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_management_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareManagement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_management_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_management_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_management_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}/management', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareManagement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_networks_get(self, subscription_id, **kwargs):  # noqa: E501
        """List networks  # noqa: E501

        List all networks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_networks_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str availability_zone: Availability zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareNetwork]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_networks_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_networks_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List networks  # noqa: E501

        List all networks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_networks_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str availability_zone: Availability zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareNetwork], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_networks_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_networks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/networks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareNetwork]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_regions_get(self, **kwargs):  # noqa: E501
        """List regions  # noqa: E501

        List all regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_regions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareRegion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_regions_get_with_http_info(**kwargs)  # noqa: E501

    def vmware_service_resources_regions_get_with_http_info(self, **kwargs):  # noqa: E501
        """List regions  # noqa: E501

        List all regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_regions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareRegion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_regions_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareRegion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_security_groups_get(self, subscription_id, **kwargs):  # noqa: E501
        """List security groups  # noqa: E501

        List of security groups. The result is always an empty list. There are no security groups in VMWare.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_security_groups_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: VM id
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_security_groups_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_security_groups_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List security groups  # noqa: E501

        List of security groups. The result is always an empty list. There are no security groups in VMWare.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_security_groups_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: VM id
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_security_groups_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_security_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/securityGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_snapshot_delete(self, subscription_id, snapshot_id, **kwargs):  # noqa: E501
        """Delete snapshot  # noqa: E501

        Delete snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_snapshot_delete(subscription_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str snapshot_id: snapshot id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_snapshot_delete_with_http_info(subscription_id, snapshot_id, **kwargs)  # noqa: E501

    def vmware_service_resources_snapshot_delete_with_http_info(self, subscription_id, snapshot_id, **kwargs):  # noqa: E501
        """Delete snapshot  # noqa: E501

        Delete snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_snapshot_delete_with_http_info(subscription_id, snapshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str snapshot_id: snapshot id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'snapshot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_snapshot_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_snapshot_delete`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in local_var_params or
                local_var_params['snapshot_id'] is None):
            raise ApiValueError("Missing the required parameter `snapshot_id` when calling `vmware_service_resources_snapshot_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'snapshot_id' in local_var_params:
            path_params['snapshotId'] = local_var_params['snapshot_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/snapshots/{snapshotId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_snapshots_get(self, subscription_id, **kwargs):  # noqa: E501
        """List snapshots  # noqa: E501

        Get list of all snapshots  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_snapshots_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM in query
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_snapshots_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_snapshots_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List snapshots  # noqa: E501

        Get list of all snapshots  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_snapshots_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM in query
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_snapshots_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_snapshots_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/snapshots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_snapshots_post(self, subscription_id, vmware_create_snapshot, **kwargs):  # noqa: E501
        """Create a new snapshot  # noqa: E501

        Create a new snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_snapshots_post(subscription_id, vmware_create_snapshot, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareCreateSnapshot vmware_create_snapshot: A create snapshot object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_snapshots_post_with_http_info(subscription_id, vmware_create_snapshot, **kwargs)  # noqa: E501

    def vmware_service_resources_snapshots_post_with_http_info(self, subscription_id, vmware_create_snapshot, **kwargs):  # noqa: E501
        """Create a new snapshot  # noqa: E501

        Create a new snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_snapshots_post_with_http_info(subscription_id, vmware_create_snapshot, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareCreateSnapshot vmware_create_snapshot: A create snapshot object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vmware_create_snapshot']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_snapshots_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_snapshots_post`")  # noqa: E501
        # verify the required parameter 'vmware_create_snapshot' is set
        if ('vmware_create_snapshot' not in local_var_params or
                local_var_params['vmware_create_snapshot'] is None):
            raise ApiValueError("Missing the required parameter `vmware_create_snapshot` when calling `vmware_service_resources_snapshots_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_create_snapshot' in local_var_params:
            body_params = local_var_params['vmware_create_snapshot']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_subnets_get(self, subscription_id, network_id, **kwargs):  # noqa: E501
        """List network subnets  # noqa: E501

        List all subnets which belong to the given network  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_subnets_get(subscription_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str network_id: Network id (required)
        :param str availability_zone: Availability zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareSubnet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_subnets_get_with_http_info(subscription_id, network_id, **kwargs)  # noqa: E501

    def vmware_service_resources_subnets_get_with_http_info(self, subscription_id, network_id, **kwargs):  # noqa: E501
        """List network subnets  # noqa: E501

        List all subnets which belong to the given network  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_subnets_get_with_http_info(subscription_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str network_id: Network id (required)
        :param str availability_zone: Availability zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareSubnet], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'network_id', 'availability_zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_subnets_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_subnets_get`")  # noqa: E501
        # verify the required parameter 'network_id' is set
        if ('network_id' not in local_var_params or
                local_var_params['network_id'] is None):
            raise ApiValueError("Missing the required parameter `network_id` when calling `vmware_service_resources_subnets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'network_id' in local_var_params:
            path_params['networkId'] = local_var_params['network_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/networks/{networkId}/subnets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareSubnet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_validate_subscription_post(self, **kwargs):  # noqa: E501
        """Validate subscription  # noqa: E501

        Validate subscription before adding it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_validate_subscription_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param VmwareSubscription vmware_subscription: Validate subscription data
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_validate_subscription_post_with_http_info(**kwargs)  # noqa: E501

    def vmware_service_resources_validate_subscription_post_with_http_info(self, **kwargs):  # noqa: E501
        """Validate subscription  # noqa: E501

        Validate subscription before adding it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_validate_subscription_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param VmwareSubscription vmware_subscription: Validate subscription data
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vmware_subscription']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_validate_subscription_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_subscription' in local_var_params:
            body_params = local_var_params['vmware_subscription']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/validateSubscription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_command_put(self, subscription_id, vm_id, action, **kwargs):  # noqa: E501
        """Execute a power action on a VM  # noqa: E501

        Execute action on a VM. Actions are start, poweroff, softReboot, hardReboot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_command_put(subscription_id, vm_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareAction action: Power action to be invoked on the VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_command_put_with_http_info(subscription_id, vm_id, action, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_command_put_with_http_info(self, subscription_id, vm_id, action, **kwargs):  # noqa: E501
        """Execute a power action on a VM  # noqa: E501

        Execute action on a VM. Actions are start, poweroff, softReboot, hardReboot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_command_put_with_http_info(subscription_id, vm_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareAction action: Power action to be invoked on the VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_command_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_command_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_command_put`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in local_var_params or
                local_var_params['action'] is None):
            raise ApiValueError("Missing the required parameter `action` when calling `vmware_service_resources_vm_command_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501
        if 'action' in local_var_params:
            path_params['action'] = local_var_params['action']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}/command/{action}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_delete(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Delete a VM  # noqa: E501

        Delete a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_delete(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_delete_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_delete_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Delete a VM  # noqa: E501

        Delete a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_delete_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_delete`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_details_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Get VM details  # noqa: E501

        Get VM details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_details_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareVMdetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_details_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_details_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Get VM details  # noqa: E501

        Get VM details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_details_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareVMdetails], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_details_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_details_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareVMdetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Get VM by id  # noqa: E501

        Get virtual machine by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Get VM by id  # noqa: E501

        Get virtual machine by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareVM, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_password_get(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Get the VM password  # noqa: E501

        Get the password in an encrypted form for the virtual machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_password_get(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwarePassword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_password_get_with_http_info(subscription_id, vm_id, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_password_get_with_http_info(self, subscription_id, vm_id, **kwargs):  # noqa: E501
        """Get the VM password  # noqa: E501

        Get the password in an encrypted form for the virtual machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_password_get_with_http_info(subscription_id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwarePassword, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_password_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_password_get`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_password_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}/password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwarePassword',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_patch(self, subscription_id, vm_id, vmware_update_vm_params, **kwargs):  # noqa: E501
        """Update VM  # noqa: E501

        Modify VM properties. Currently it is possible to modify the VM flavor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_patch(subscription_id, vm_id, vmware_update_vm_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareUpdateVmParams vmware_update_vm_params: VM properties (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_patch_with_http_info(subscription_id, vm_id, vmware_update_vm_params, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_patch_with_http_info(self, subscription_id, vm_id, vmware_update_vm_params, **kwargs):  # noqa: E501
        """Update VM  # noqa: E501

        Modify VM properties. Currently it is possible to modify the VM flavor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_patch_with_http_info(subscription_id, vm_id, vmware_update_vm_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareUpdateVmParams vmware_update_vm_params: VM properties (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'vmware_update_vm_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_patch`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_patch`")  # noqa: E501
        # verify the required parameter 'vmware_update_vm_params' is set
        if ('vmware_update_vm_params' not in local_var_params or
                local_var_params['vmware_update_vm_params'] is None):
            raise ApiValueError("Missing the required parameter `vmware_update_vm_params` when calling `vmware_service_resources_vm_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_update_vm_params' in local_var_params:
            body_params = local_var_params['vmware_update_vm_params']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_tag_put(self, subscription_id, vm_id, vmware_tag_update, **kwargs):  # noqa: E501
        """Tag VM  # noqa: E501

        Set a tag value for a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_tag_put(subscription_id, vm_id, vmware_tag_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareTagUpdate vmware_tag_update: Tag object to be updated (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_tag_put_with_http_info(subscription_id, vm_id, vmware_tag_update, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_tag_put_with_http_info(self, subscription_id, vm_id, vmware_tag_update, **kwargs):  # noqa: E501
        """Tag VM  # noqa: E501

        Set a tag value for a VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_tag_put_with_http_info(subscription_id, vm_id, vmware_tag_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareTagUpdate vmware_tag_update: Tag object to be updated (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'vmware_tag_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_tag_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_tag_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_tag_put`")  # noqa: E501
        # verify the required parameter 'vmware_tag_update' is set
        if ('vmware_tag_update' not in local_var_params or
                local_var_params['vmware_tag_update'] is None):
            raise ApiValueError("Missing the required parameter `vmware_tag_update` when calling `vmware_service_resources_vm_tag_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_tag_update' in local_var_params:
            body_params = local_var_params['vmware_tag_update']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}/setTag', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_workshift_delete(self, vm_id, subscription_id, **kwargs):  # noqa: E501
        """Delete the VM Workshift  # noqa: E501

        Delete the VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_workshift_delete(vm_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str vm_id: Id of VM (required)
        :param str subscription_id: Id of subscription (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_workshift_delete_with_http_info(vm_id, subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_workshift_delete_with_http_info(self, vm_id, subscription_id, **kwargs):  # noqa: E501
        """Delete the VM Workshift  # noqa: E501

        Delete the VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_workshift_delete_with_http_info(vm_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str vm_id: Id of VM (required)
        :param str subscription_id: Id of subscription (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vm_id', 'subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_workshift_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_workshift_delete`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_workshift_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}/workshift', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_workshift_put(self, subscription_id, vm_id, vmware_workshift, **kwargs):  # noqa: E501
        """Update the VM workshift  # noqa: E501

        Update the VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_workshift_put(subscription_id, vm_id, vmware_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareWorkshift vmware_workshift: Workshift object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareWorkshift
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_workshift_put_with_http_info(subscription_id, vm_id, vmware_workshift, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_workshift_put_with_http_info(self, subscription_id, vm_id, vmware_workshift, **kwargs):  # noqa: E501
        """Update the VM workshift  # noqa: E501

        Update the VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_workshift_put_with_http_info(subscription_id, vm_id, vmware_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareWorkshift vmware_workshift: Workshift object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareWorkshift, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'vmware_workshift']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_workshift_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_workshift_put`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_workshift_put`")  # noqa: E501
        # verify the required parameter 'vmware_workshift' is set
        if ('vmware_workshift' not in local_var_params or
                local_var_params['vmware_workshift'] is None):
            raise ApiValueError("Missing the required parameter `vmware_workshift` when calling `vmware_service_resources_vm_workshift_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_workshift' in local_var_params:
            body_params = local_var_params['vmware_workshift']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}/workshift', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareWorkshift',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vm_workshifts_post(self, subscription_id, vm_id, vmware_workshift, **kwargs):  # noqa: E501
        """Add a workshift to the VM  # noqa: E501

        Create a VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_workshifts_post(subscription_id, vm_id, vmware_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareWorkshift vmware_workshift: Workshift object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareWorkshift
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vm_workshifts_post_with_http_info(subscription_id, vm_id, vmware_workshift, **kwargs)  # noqa: E501

    def vmware_service_resources_vm_workshifts_post_with_http_info(self, subscription_id, vm_id, vmware_workshift, **kwargs):  # noqa: E501
        """Add a workshift to the VM  # noqa: E501

        Create a VM Workshift  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vm_workshifts_post_with_http_info(subscription_id, vm_id, vmware_workshift, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str vm_id: Id of VM (required)
        :param VmwareWorkshift vmware_workshift: Workshift object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareWorkshift, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vm_id', 'vmware_workshift']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vm_workshifts_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vm_workshifts_post`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in local_var_params or
                local_var_params['vm_id'] is None):
            raise ApiValueError("Missing the required parameter `vm_id` when calling `vmware_service_resources_vm_workshifts_post`")  # noqa: E501
        # verify the required parameter 'vmware_workshift' is set
        if ('vmware_workshift' not in local_var_params or
                local_var_params['vmware_workshift'] is None):
            raise ApiValueError("Missing the required parameter `vmware_workshift` when calling `vmware_service_resources_vm_workshifts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vm_id' in local_var_params:
            path_params['vmId'] = local_var_params['vm_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_workshift' in local_var_params:
            body_params = local_var_params['vmware_workshift']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms/{vmId}/workshift', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareWorkshift',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vms_get(self, subscription_id, **kwargs):  # noqa: E501
        """List VMs  # noqa: E501

        List all virtual machines  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vms_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str availability_zone_id: Availability zone to filter by
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareVmSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vms_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_vms_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List VMs  # noqa: E501

        List all virtual machines  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vms_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str availability_zone_id: Availability zone to filter by
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareVmSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vms_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareVmSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_vms_post(self, subscription_id, vmware_vm_create, **kwargs):  # noqa: E501
        """Create a VM  # noqa: E501

        Create a new VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vms_post(subscription_id, vmware_vm_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareVMCreate vmware_vm_create: VM creation data (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_vms_post_with_http_info(subscription_id, vmware_vm_create, **kwargs)  # noqa: E501

    def vmware_service_resources_vms_post_with_http_info(self, subscription_id, vmware_vm_create, **kwargs):  # noqa: E501
        """Create a VM  # noqa: E501

        Create a new VM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_vms_post_with_http_info(subscription_id, vmware_vm_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareVMCreate vmware_vm_create: VM creation data (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareVM, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vmware_vm_create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_vms_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_vms_post`")  # noqa: E501
        # verify the required parameter 'vmware_vm_create' is set
        if ('vmware_vm_create' not in local_var_params or
                local_var_params['vmware_vm_create'] is None):
            raise ApiValueError("Missing the required parameter `vmware_vm_create` when calling `vmware_service_resources_vms_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_vm_create' in local_var_params:
            body_params = local_var_params['vmware_vm_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/vms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_volume_attachment_delete(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Dettaches and deletes a volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volume_attachment_delete(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param str vm_id: Id of VM in query
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_volume_attachment_delete_with_http_info(subscription_id, volume_id, **kwargs)  # noqa: E501

    def vmware_service_resources_volume_attachment_delete_with_http_info(self, subscription_id, volume_id, **kwargs):  # noqa: E501
        """Dettaches and deletes a volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volume_attachment_delete_with_http_info(subscription_id, volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param str vm_id: Id of VM in query
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_volume_attachment_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_volume_attachment_delete`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `vmware_service_resources_volume_attachment_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'vm_id' in local_var_params:
            query_params.append(('vmId', local_var_params['vm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/volumes/{volume_id}/detach', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_volume_patch(self, subscription_id, volume_id, vmware_update_volume_params, **kwargs):  # noqa: E501
        """Update a volume  # noqa: E501

        Modify volume properties. Currently it is possible to change to volume size.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volume_patch(subscription_id, volume_id, vmware_update_volume_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param VmwareUpdateVolumeParams vmware_update_volume_params: Volume properties (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_volume_patch_with_http_info(subscription_id, volume_id, vmware_update_volume_params, **kwargs)  # noqa: E501

    def vmware_service_resources_volume_patch_with_http_info(self, subscription_id, volume_id, vmware_update_volume_params, **kwargs):  # noqa: E501
        """Update a volume  # noqa: E501

        Modify volume properties. Currently it is possible to change to volume size.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volume_patch_with_http_info(subscription_id, volume_id, vmware_update_volume_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str volume_id: ID of Volume (required)
        :param VmwareUpdateVolumeParams vmware_update_volume_params: Volume properties (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'volume_id', 'vmware_update_volume_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_volume_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_volume_patch`")  # noqa: E501
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in local_var_params or
                local_var_params['volume_id'] is None):
            raise ApiValueError("Missing the required parameter `volume_id` when calling `vmware_service_resources_volume_patch`")  # noqa: E501
        # verify the required parameter 'vmware_update_volume_params' is set
        if ('vmware_update_volume_params' not in local_var_params or
                local_var_params['vmware_update_volume_params'] is None):
            raise ApiValueError("Missing the required parameter `vmware_update_volume_params` when calling `vmware_service_resources_volume_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in local_var_params:
            path_params['volume_id'] = local_var_params['volume_id']  # noqa: E501

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_update_volume_params' in local_var_params:
            body_params = local_var_params['vmware_update_volume_params']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/volumes/{volume_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_volume_types_get(self, subscription_id, **kwargs):  # noqa: E501
        """List volume types  # noqa: E501

        Get a list of all volume types user can create volume with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volume_types_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str availability_zone_id: Availability zone to filter by
        :param bool is_os_compatible: If true, show only volumes on which OS can be installed
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareVolumeType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_volume_types_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_volume_types_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List volume types  # noqa: E501

        Get a list of all volume types user can create volume with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volume_types_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param str availability_zone_id: Availability zone to filter by
        :param bool is_os_compatible: If true, show only volumes on which OS can be installed
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareVolumeType], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'availability_zone_id', 'is_os_compatible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_volume_types_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_volume_types_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'availability_zone_id' in local_var_params:
            query_params.append(('availabilityZoneId', local_var_params['availability_zone_id']))  # noqa: E501
        if 'is_os_compatible' in local_var_params:
            query_params.append(('isOsCompatible', local_var_params['is_os_compatible']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/volumeTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareVolumeType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_volumes_get(self, subscription_id, **kwargs):  # noqa: E501
        """List volumes  # noqa: E501

        Get list of all volumes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volumes_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareVolumeStatus status: Volume status to filter by
        :param str availability_zone: Availability zone to filter by
        :param bool is_os_disk: Filter volumes by isOsDisk value
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VmwareVolume]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_volumes_get_with_http_info(subscription_id, **kwargs)  # noqa: E501

    def vmware_service_resources_volumes_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """List volumes  # noqa: E501

        Get list of all volumes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volumes_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareVolumeStatus status: Volume status to filter by
        :param str availability_zone: Availability zone to filter by
        :param bool is_os_disk: Filter volumes by isOsDisk value
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VmwareVolume], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'status', 'availability_zone', 'is_os_disk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_volumes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_volumes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'availability_zone' in local_var_params:
            query_params.append(('availabilityZone', local_var_params['availability_zone']))  # noqa: E501
        if 'is_os_disk' in local_var_params:
            query_params.append(('isOsDisk', local_var_params['is_os_disk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmwareVolume]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vmware_service_resources_volumes_post(self, subscription_id, vmware_new_volume, **kwargs):  # noqa: E501
        """Create a new volume  # noqa: E501

        Create a new volume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volumes_post(subscription_id, vmware_new_volume, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareNewVolume vmware_new_volume: A volume object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VmwareVolume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.vmware_service_resources_volumes_post_with_http_info(subscription_id, vmware_new_volume, **kwargs)  # noqa: E501

    def vmware_service_resources_volumes_post_with_http_info(self, subscription_id, vmware_new_volume, **kwargs):  # noqa: E501
        """Create a new volume  # noqa: E501

        Create a new volume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vmware_service_resources_volumes_post_with_http_info(subscription_id, vmware_new_volume, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str subscription_id: Id of subscription (required)
        :param VmwareNewVolume vmware_new_volume: A volume object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VmwareVolume, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['subscription_id', 'vmware_new_volume']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vmware_service_resources_volumes_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in local_var_params or
                local_var_params['subscription_id'] is None):
            raise ApiValueError("Missing the required parameter `subscription_id` when calling `vmware_service_resources_volumes_post`")  # noqa: E501
        # verify the required parameter 'vmware_new_volume' is set
        if ('vmware_new_volume' not in local_var_params or
                local_var_params['vmware_new_volume'] is None):
            raise ApiValueError("Missing the required parameter `vmware_new_volume` when calling `vmware_service_resources_volumes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_id' in local_var_params:
            query_params.append(('subscriptionId', local_var_params['subscription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vmware_new_volume' in local_var_params:
            body_params = local_var_params['vmware_new_volume']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/vmware/compute/volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmwareVolume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
