# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsPlatformMetrics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vms': 'int',
        'memory': 'int',
        'storage': 'int',
        'vcpus': 'int'
    }

    attribute_map = {
        'vms': 'vms',
        'memory': 'memory',
        'storage': 'storage',
        'vcpus': 'vcpus'
    }

    def __init__(self, vms=None, memory=None, storage=None, vcpus=None):  # noqa: E501
        """AnalyticsPlatformMetrics - a model defined in OpenAPI"""  # noqa: E501

        self._vms = None
        self._memory = None
        self._storage = None
        self._vcpus = None
        self.discriminator = None

        if vms is not None:
            self.vms = vms
        if memory is not None:
            self.memory = memory
        if storage is not None:
            self.storage = storage
        if vcpus is not None:
            self.vcpus = vcpus

    @property
    def vms(self):
        """Gets the vms of this AnalyticsPlatformMetrics.  # noqa: E501

        Total number of VMs  # noqa: E501

        :return: The vms of this AnalyticsPlatformMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vms

    @vms.setter
    def vms(self, vms):
        """Sets the vms of this AnalyticsPlatformMetrics.

        Total number of VMs  # noqa: E501

        :param vms: The vms of this AnalyticsPlatformMetrics.  # noqa: E501
        :type: int
        """

        self._vms = vms

    @property
    def memory(self):
        """Gets the memory of this AnalyticsPlatformMetrics.  # noqa: E501

        Current memory usage  # noqa: E501

        :return: The memory of this AnalyticsPlatformMetrics.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this AnalyticsPlatformMetrics.

        Current memory usage  # noqa: E501

        :param memory: The memory of this AnalyticsPlatformMetrics.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def storage(self):
        """Gets the storage of this AnalyticsPlatformMetrics.  # noqa: E501

        Current storage usage  # noqa: E501

        :return: The storage of this AnalyticsPlatformMetrics.  # noqa: E501
        :rtype: int
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this AnalyticsPlatformMetrics.

        Current storage usage  # noqa: E501

        :param storage: The storage of this AnalyticsPlatformMetrics.  # noqa: E501
        :type: int
        """

        self._storage = storage

    @property
    def vcpus(self):
        """Gets the vcpus of this AnalyticsPlatformMetrics.  # noqa: E501

        Amount of virtual CPU  # noqa: E501

        :return: The vcpus of this AnalyticsPlatformMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this AnalyticsPlatformMetrics.

        Amount of virtual CPU  # noqa: E501

        :param vcpus: The vcpus of this AnalyticsPlatformMetrics.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsPlatformMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
