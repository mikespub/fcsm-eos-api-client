# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalyticsPlatformsUsage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'k5': 'float',
        'vmware': 'float',
        'azure': 'float',
        'openstack': 'float',
        'aws': 'float'
    }

    attribute_map = {
        'k5': 'k5',
        'vmware': 'vmware',
        'azure': 'azure',
        'openstack': 'openstack',
        'aws': 'aws'
    }

    def __init__(self, k5=None, vmware=None, azure=None, openstack=None, aws=None):  # noqa: E501
        """AnalyticsPlatformsUsage - a model defined in OpenAPI"""  # noqa: E501

        self._k5 = None
        self._vmware = None
        self._azure = None
        self._openstack = None
        self._aws = None
        self.discriminator = None

        if k5 is not None:
            self.k5 = k5
        if vmware is not None:
            self.vmware = vmware
        if azure is not None:
            self.azure = azure
        if openstack is not None:
            self.openstack = openstack
        if aws is not None:
            self.aws = aws

    @property
    def k5(self):
        """Gets the k5 of this AnalyticsPlatformsUsage.  # noqa: E501

        Percentage platform usage  # noqa: E501

        :return: The k5 of this AnalyticsPlatformsUsage.  # noqa: E501
        :rtype: float
        """
        return self._k5

    @k5.setter
    def k5(self, k5):
        """Sets the k5 of this AnalyticsPlatformsUsage.

        Percentage platform usage  # noqa: E501

        :param k5: The k5 of this AnalyticsPlatformsUsage.  # noqa: E501
        :type: float
        """

        self._k5 = k5

    @property
    def vmware(self):
        """Gets the vmware of this AnalyticsPlatformsUsage.  # noqa: E501

        Percentage platform usage  # noqa: E501

        :return: The vmware of this AnalyticsPlatformsUsage.  # noqa: E501
        :rtype: float
        """
        return self._vmware

    @vmware.setter
    def vmware(self, vmware):
        """Sets the vmware of this AnalyticsPlatformsUsage.

        Percentage platform usage  # noqa: E501

        :param vmware: The vmware of this AnalyticsPlatformsUsage.  # noqa: E501
        :type: float
        """

        self._vmware = vmware

    @property
    def azure(self):
        """Gets the azure of this AnalyticsPlatformsUsage.  # noqa: E501

        Percentage platform usage  # noqa: E501

        :return: The azure of this AnalyticsPlatformsUsage.  # noqa: E501
        :rtype: float
        """
        return self._azure

    @azure.setter
    def azure(self, azure):
        """Sets the azure of this AnalyticsPlatformsUsage.

        Percentage platform usage  # noqa: E501

        :param azure: The azure of this AnalyticsPlatformsUsage.  # noqa: E501
        :type: float
        """

        self._azure = azure

    @property
    def openstack(self):
        """Gets the openstack of this AnalyticsPlatformsUsage.  # noqa: E501

        Percentage platform usage  # noqa: E501

        :return: The openstack of this AnalyticsPlatformsUsage.  # noqa: E501
        :rtype: float
        """
        return self._openstack

    @openstack.setter
    def openstack(self, openstack):
        """Sets the openstack of this AnalyticsPlatformsUsage.

        Percentage platform usage  # noqa: E501

        :param openstack: The openstack of this AnalyticsPlatformsUsage.  # noqa: E501
        :type: float
        """

        self._openstack = openstack

    @property
    def aws(self):
        """Gets the aws of this AnalyticsPlatformsUsage.  # noqa: E501

        Percentage platform usage  # noqa: E501

        :return: The aws of this AnalyticsPlatformsUsage.  # noqa: E501
        :rtype: float
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this AnalyticsPlatformsUsage.

        Percentage platform usage  # noqa: E501

        :param aws: The aws of this AnalyticsPlatformsUsage.  # noqa: E501
        :type: float
        """

        self._aws = aws

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsPlatformsUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
