# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AwsIPv4Address(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_actions': 'list[str]',
        'dns_name': 'str',
        'id': 'str',
        'ip': 'str',
        'is_directly_associated': 'bool',
        'is_floating': 'bool',
        'is_public': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'allowed_actions': 'allowedActions',
        'dns_name': 'dnsName',
        'id': 'id',
        'ip': 'ip',
        'is_directly_associated': 'isDirectlyAssociated',
        'is_floating': 'isFloating',
        'is_public': 'isPublic',
        'name': 'name'
    }

    def __init__(self, allowed_actions=None, dns_name=None, id=None, ip=None, is_directly_associated=None, is_floating=None, is_public=None, name=None):  # noqa: E501
        """AwsIPv4Address - a model defined in OpenAPI"""  # noqa: E501

        self._allowed_actions = None
        self._dns_name = None
        self._id = None
        self._ip = None
        self._is_directly_associated = None
        self._is_floating = None
        self._is_public = None
        self._name = None
        self.discriminator = None

        self.allowed_actions = allowed_actions
        if dns_name is not None:
            self.dns_name = dns_name
        self.id = id
        self.ip = ip
        self.is_directly_associated = is_directly_associated
        self.is_floating = is_floating
        self.is_public = is_public
        self.name = name

    @property
    def allowed_actions(self):
        """Gets the allowed_actions of this AwsIPv4Address.  # noqa: E501


        :return: The allowed_actions of this AwsIPv4Address.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_actions

    @allowed_actions.setter
    def allowed_actions(self, allowed_actions):
        """Sets the allowed_actions of this AwsIPv4Address.


        :param allowed_actions: The allowed_actions of this AwsIPv4Address.  # noqa: E501
        :type: list[str]
        """
        if allowed_actions is None:
            raise ValueError("Invalid value for `allowed_actions`, must not be `None`")  # noqa: E501

        self._allowed_actions = allowed_actions

    @property
    def dns_name(self):
        """Gets the dns_name of this AwsIPv4Address.  # noqa: E501


        :return: The dns_name of this AwsIPv4Address.  # noqa: E501
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this AwsIPv4Address.


        :param dns_name: The dns_name of this AwsIPv4Address.  # noqa: E501
        :type: str
        """

        self._dns_name = dns_name

    @property
    def id(self):
        """Gets the id of this AwsIPv4Address.  # noqa: E501


        :return: The id of this AwsIPv4Address.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AwsIPv4Address.


        :param id: The id of this AwsIPv4Address.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this AwsIPv4Address.  # noqa: E501


        :return: The ip of this AwsIPv4Address.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AwsIPv4Address.


        :param ip: The ip of this AwsIPv4Address.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def is_directly_associated(self):
        """Gets the is_directly_associated of this AwsIPv4Address.  # noqa: E501


        :return: The is_directly_associated of this AwsIPv4Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_directly_associated

    @is_directly_associated.setter
    def is_directly_associated(self, is_directly_associated):
        """Sets the is_directly_associated of this AwsIPv4Address.


        :param is_directly_associated: The is_directly_associated of this AwsIPv4Address.  # noqa: E501
        :type: bool
        """
        if is_directly_associated is None:
            raise ValueError("Invalid value for `is_directly_associated`, must not be `None`")  # noqa: E501

        self._is_directly_associated = is_directly_associated

    @property
    def is_floating(self):
        """Gets the is_floating of this AwsIPv4Address.  # noqa: E501


        :return: The is_floating of this AwsIPv4Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_floating

    @is_floating.setter
    def is_floating(self, is_floating):
        """Sets the is_floating of this AwsIPv4Address.


        :param is_floating: The is_floating of this AwsIPv4Address.  # noqa: E501
        :type: bool
        """
        if is_floating is None:
            raise ValueError("Invalid value for `is_floating`, must not be `None`")  # noqa: E501

        self._is_floating = is_floating

    @property
    def is_public(self):
        """Gets the is_public of this AwsIPv4Address.  # noqa: E501


        :return: The is_public of this AwsIPv4Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this AwsIPv4Address.


        :param is_public: The is_public of this AwsIPv4Address.  # noqa: E501
        :type: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this AwsIPv4Address.  # noqa: E501


        :return: The name of this AwsIPv4Address.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AwsIPv4Address.


        :param name: The name of this AwsIPv4Address.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsIPv4Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
