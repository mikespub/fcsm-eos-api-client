# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AzureFlavor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'ram_in_mb': 'int',
        'vcpus': 'int',
        'disk_in_gb': 'int',
        'ephemeral_disk_in_gb': 'int',
        'compatible_volume_type_ids': 'list[AzureVolumeTypeId]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'ram_in_mb': 'ramInMb',
        'vcpus': 'vcpus',
        'disk_in_gb': 'diskInGb',
        'ephemeral_disk_in_gb': 'ephemeralDiskInGb',
        'compatible_volume_type_ids': 'compatibleVolumeTypeIds'
    }

    def __init__(self, id=None, name=None, ram_in_mb=None, vcpus=None, disk_in_gb=None, ephemeral_disk_in_gb=None, compatible_volume_type_ids=None):  # noqa: E501
        """AzureFlavor - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._ram_in_mb = None
        self._vcpus = None
        self._disk_in_gb = None
        self._ephemeral_disk_in_gb = None
        self._compatible_volume_type_ids = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.ram_in_mb = ram_in_mb
        self.vcpus = vcpus
        self.disk_in_gb = disk_in_gb
        if ephemeral_disk_in_gb is not None:
            self.ephemeral_disk_in_gb = ephemeral_disk_in_gb
        self.compatible_volume_type_ids = compatible_volume_type_ids

    @property
    def id(self):
        """Gets the id of this AzureFlavor.  # noqa: E501


        :return: The id of this AzureFlavor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AzureFlavor.


        :param id: The id of this AzureFlavor.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this AzureFlavor.  # noqa: E501


        :return: The name of this AzureFlavor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AzureFlavor.


        :param name: The name of this AzureFlavor.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ram_in_mb(self):
        """Gets the ram_in_mb of this AzureFlavor.  # noqa: E501

        Amount of memory supported by virtual machine with this flavor  # noqa: E501

        :return: The ram_in_mb of this AzureFlavor.  # noqa: E501
        :rtype: int
        """
        return self._ram_in_mb

    @ram_in_mb.setter
    def ram_in_mb(self, ram_in_mb):
        """Sets the ram_in_mb of this AzureFlavor.

        Amount of memory supported by virtual machine with this flavor  # noqa: E501

        :param ram_in_mb: The ram_in_mb of this AzureFlavor.  # noqa: E501
        :type: int
        """
        if ram_in_mb is None:
            raise ValueError("Invalid value for `ram_in_mb`, must not be `None`")  # noqa: E501

        self._ram_in_mb = ram_in_mb

    @property
    def vcpus(self):
        """Gets the vcpus of this AzureFlavor.  # noqa: E501

        Amount of VCPUs supported by virtual machine with this flavor  # noqa: E501

        :return: The vcpus of this AzureFlavor.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this AzureFlavor.

        Amount of VCPUs supported by virtual machine with this flavor  # noqa: E501

        :param vcpus: The vcpus of this AzureFlavor.  # noqa: E501
        :type: int
        """
        if vcpus is None:
            raise ValueError("Invalid value for `vcpus`, must not be `None`")  # noqa: E501

        self._vcpus = vcpus

    @property
    def disk_in_gb(self):
        """Gets the disk_in_gb of this AzureFlavor.  # noqa: E501

        Highest OS volume size allowed for virtual machines with this flavor  # noqa: E501

        :return: The disk_in_gb of this AzureFlavor.  # noqa: E501
        :rtype: int
        """
        return self._disk_in_gb

    @disk_in_gb.setter
    def disk_in_gb(self, disk_in_gb):
        """Sets the disk_in_gb of this AzureFlavor.

        Highest OS volume size allowed for virtual machines with this flavor  # noqa: E501

        :param disk_in_gb: The disk_in_gb of this AzureFlavor.  # noqa: E501
        :type: int
        """
        if disk_in_gb is None:
            raise ValueError("Invalid value for `disk_in_gb`, must not be `None`")  # noqa: E501

        self._disk_in_gb = disk_in_gb

    @property
    def ephemeral_disk_in_gb(self):
        """Gets the ephemeral_disk_in_gb of this AzureFlavor.  # noqa: E501

        Highest data volume size allowed for virtual machines with this flavor  # noqa: E501

        :return: The ephemeral_disk_in_gb of this AzureFlavor.  # noqa: E501
        :rtype: int
        """
        return self._ephemeral_disk_in_gb

    @ephemeral_disk_in_gb.setter
    def ephemeral_disk_in_gb(self, ephemeral_disk_in_gb):
        """Sets the ephemeral_disk_in_gb of this AzureFlavor.

        Highest data volume size allowed for virtual machines with this flavor  # noqa: E501

        :param ephemeral_disk_in_gb: The ephemeral_disk_in_gb of this AzureFlavor.  # noqa: E501
        :type: int
        """

        self._ephemeral_disk_in_gb = ephemeral_disk_in_gb

    @property
    def compatible_volume_type_ids(self):
        """Gets the compatible_volume_type_ids of this AzureFlavor.  # noqa: E501

        List of volume types that can be attached to this virtual machine as data volumes  # noqa: E501

        :return: The compatible_volume_type_ids of this AzureFlavor.  # noqa: E501
        :rtype: list[AzureVolumeTypeId]
        """
        return self._compatible_volume_type_ids

    @compatible_volume_type_ids.setter
    def compatible_volume_type_ids(self, compatible_volume_type_ids):
        """Sets the compatible_volume_type_ids of this AzureFlavor.

        List of volume types that can be attached to this virtual machine as data volumes  # noqa: E501

        :param compatible_volume_type_ids: The compatible_volume_type_ids of this AzureFlavor.  # noqa: E501
        :type: list[AzureVolumeTypeId]
        """
        if compatible_volume_type_ids is None:
            raise ValueError("Invalid value for `compatible_volume_type_ids`, must not be `None`")  # noqa: E501

        self._compatible_volume_type_ids = compatible_volume_type_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureFlavor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
