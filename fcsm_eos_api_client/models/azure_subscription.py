# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AzureSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'region_id': 'str',
        'sp_username': 'str',
        'sp_password': 'str',
        'platform_subscription_id': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'region_id': 'regionId',
        'sp_username': 'spUsername',
        'sp_password': 'spPassword',
        'platform_subscription_id': 'platformSubscriptionId',
        'tenant_id': 'tenantId'
    }

    def __init__(self, region_id=None, sp_username=None, sp_password=None, platform_subscription_id=None, tenant_id=None):  # noqa: E501
        """AzureSubscription - a model defined in OpenAPI"""  # noqa: E501

        self._region_id = None
        self._sp_username = None
        self._sp_password = None
        self._platform_subscription_id = None
        self._tenant_id = None
        self.discriminator = None

        self.region_id = region_id
        self.sp_username = sp_username
        self.sp_password = sp_password
        self.platform_subscription_id = platform_subscription_id
        self.tenant_id = tenant_id

    @property
    def region_id(self):
        """Gets the region_id of this AzureSubscription.  # noqa: E501


        :return: The region_id of this AzureSubscription.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this AzureSubscription.


        :param region_id: The region_id of this AzureSubscription.  # noqa: E501
        :type: str
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")  # noqa: E501

        self._region_id = region_id

    @property
    def sp_username(self):
        """Gets the sp_username of this AzureSubscription.  # noqa: E501


        :return: The sp_username of this AzureSubscription.  # noqa: E501
        :rtype: str
        """
        return self._sp_username

    @sp_username.setter
    def sp_username(self, sp_username):
        """Sets the sp_username of this AzureSubscription.


        :param sp_username: The sp_username of this AzureSubscription.  # noqa: E501
        :type: str
        """
        if sp_username is None:
            raise ValueError("Invalid value for `sp_username`, must not be `None`")  # noqa: E501

        self._sp_username = sp_username

    @property
    def sp_password(self):
        """Gets the sp_password of this AzureSubscription.  # noqa: E501


        :return: The sp_password of this AzureSubscription.  # noqa: E501
        :rtype: str
        """
        return self._sp_password

    @sp_password.setter
    def sp_password(self, sp_password):
        """Sets the sp_password of this AzureSubscription.


        :param sp_password: The sp_password of this AzureSubscription.  # noqa: E501
        :type: str
        """
        if sp_password is None:
            raise ValueError("Invalid value for `sp_password`, must not be `None`")  # noqa: E501

        self._sp_password = sp_password

    @property
    def platform_subscription_id(self):
        """Gets the platform_subscription_id of this AzureSubscription.  # noqa: E501


        :return: The platform_subscription_id of this AzureSubscription.  # noqa: E501
        :rtype: str
        """
        return self._platform_subscription_id

    @platform_subscription_id.setter
    def platform_subscription_id(self, platform_subscription_id):
        """Sets the platform_subscription_id of this AzureSubscription.


        :param platform_subscription_id: The platform_subscription_id of this AzureSubscription.  # noqa: E501
        :type: str
        """
        if platform_subscription_id is None:
            raise ValueError("Invalid value for `platform_subscription_id`, must not be `None`")  # noqa: E501

        self._platform_subscription_id = platform_subscription_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AzureSubscription.  # noqa: E501


        :return: The tenant_id of this AzureSubscription.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AzureSubscription.


        :param tenant_id: The tenant_id of this AzureSubscription.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
