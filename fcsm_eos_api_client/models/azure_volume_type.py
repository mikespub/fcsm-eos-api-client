# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AzureVolumeType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'AzureVolumeTypeId',
        'name': 'str',
        'min_volume_size_in_gb': 'int',
        'max_volume_size_in_gb': 'int',
        'is_os_compatible': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'min_volume_size_in_gb': 'minVolumeSizeInGb',
        'max_volume_size_in_gb': 'maxVolumeSizeInGb',
        'is_os_compatible': 'isOsCompatible'
    }

    def __init__(self, id=None, name=None, min_volume_size_in_gb=None, max_volume_size_in_gb=None, is_os_compatible=None):  # noqa: E501
        """AzureVolumeType - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._min_volume_size_in_gb = None
        self._max_volume_size_in_gb = None
        self._is_os_compatible = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if min_volume_size_in_gb is not None:
            self.min_volume_size_in_gb = min_volume_size_in_gb
        if max_volume_size_in_gb is not None:
            self.max_volume_size_in_gb = max_volume_size_in_gb
        if is_os_compatible is not None:
            self.is_os_compatible = is_os_compatible

    @property
    def id(self):
        """Gets the id of this AzureVolumeType.  # noqa: E501


        :return: The id of this AzureVolumeType.  # noqa: E501
        :rtype: AzureVolumeTypeId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AzureVolumeType.


        :param id: The id of this AzureVolumeType.  # noqa: E501
        :type: AzureVolumeTypeId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AzureVolumeType.  # noqa: E501


        :return: The name of this AzureVolumeType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AzureVolumeType.


        :param name: The name of this AzureVolumeType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def min_volume_size_in_gb(self):
        """Gets the min_volume_size_in_gb of this AzureVolumeType.  # noqa: E501


        :return: The min_volume_size_in_gb of this AzureVolumeType.  # noqa: E501
        :rtype: int
        """
        return self._min_volume_size_in_gb

    @min_volume_size_in_gb.setter
    def min_volume_size_in_gb(self, min_volume_size_in_gb):
        """Sets the min_volume_size_in_gb of this AzureVolumeType.


        :param min_volume_size_in_gb: The min_volume_size_in_gb of this AzureVolumeType.  # noqa: E501
        :type: int
        """

        self._min_volume_size_in_gb = min_volume_size_in_gb

    @property
    def max_volume_size_in_gb(self):
        """Gets the max_volume_size_in_gb of this AzureVolumeType.  # noqa: E501


        :return: The max_volume_size_in_gb of this AzureVolumeType.  # noqa: E501
        :rtype: int
        """
        return self._max_volume_size_in_gb

    @max_volume_size_in_gb.setter
    def max_volume_size_in_gb(self, max_volume_size_in_gb):
        """Sets the max_volume_size_in_gb of this AzureVolumeType.


        :param max_volume_size_in_gb: The max_volume_size_in_gb of this AzureVolumeType.  # noqa: E501
        :type: int
        """

        self._max_volume_size_in_gb = max_volume_size_in_gb

    @property
    def is_os_compatible(self):
        """Gets the is_os_compatible of this AzureVolumeType.  # noqa: E501


        :return: The is_os_compatible of this AzureVolumeType.  # noqa: E501
        :rtype: bool
        """
        return self._is_os_compatible

    @is_os_compatible.setter
    def is_os_compatible(self, is_os_compatible):
        """Sets the is_os_compatible of this AzureVolumeType.


        :param is_os_compatible: The is_os_compatible of this AzureVolumeType.  # noqa: E501
        :type: bool
        """

        self._is_os_compatible = is_os_compatible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureVolumeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
