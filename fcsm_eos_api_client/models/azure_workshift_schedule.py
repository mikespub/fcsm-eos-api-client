# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AzureWorkshiftSchedule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'minute': 'int',
        'hour': 'int',
        'days': 'list[str]'
    }

    attribute_map = {
        'minute': 'minute',
        'hour': 'hour',
        'days': 'days'
    }

    def __init__(self, minute=None, hour=None, days=None):  # noqa: E501
        """AzureWorkshiftSchedule - a model defined in OpenAPI"""  # noqa: E501

        self._minute = None
        self._hour = None
        self._days = None
        self.discriminator = None

        self.minute = minute
        self.hour = hour
        self.days = days

    @property
    def minute(self):
        """Gets the minute of this AzureWorkshiftSchedule.  # noqa: E501


        :return: The minute of this AzureWorkshiftSchedule.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this AzureWorkshiftSchedule.


        :param minute: The minute of this AzureWorkshiftSchedule.  # noqa: E501
        :type: int
        """
        if minute is None:
            raise ValueError("Invalid value for `minute`, must not be `None`")  # noqa: E501
        if minute is not None and minute > 59:  # noqa: E501
            raise ValueError("Invalid value for `minute`, must be a value less than or equal to `59`")  # noqa: E501
        if minute is not None and minute < 0:  # noqa: E501
            raise ValueError("Invalid value for `minute`, must be a value greater than or equal to `0`")  # noqa: E501

        self._minute = minute

    @property
    def hour(self):
        """Gets the hour of this AzureWorkshiftSchedule.  # noqa: E501


        :return: The hour of this AzureWorkshiftSchedule.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this AzureWorkshiftSchedule.


        :param hour: The hour of this AzureWorkshiftSchedule.  # noqa: E501
        :type: int
        """
        if hour is None:
            raise ValueError("Invalid value for `hour`, must not be `None`")  # noqa: E501
        if hour is not None and hour > 23:  # noqa: E501
            raise ValueError("Invalid value for `hour`, must be a value less than or equal to `23`")  # noqa: E501
        if hour is not None and hour < 0:  # noqa: E501
            raise ValueError("Invalid value for `hour`, must be a value greater than or equal to `0`")  # noqa: E501

        self._hour = hour

    @property
    def days(self):
        """Gets the days of this AzureWorkshiftSchedule.  # noqa: E501

        Set of days when workshift should be applied. It has to contain at least one day and cannot contain duplicates.   # noqa: E501

        :return: The days of this AzureWorkshiftSchedule.  # noqa: E501
        :rtype: list[str]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this AzureWorkshiftSchedule.

        Set of days when workshift should be applied. It has to contain at least one day and cannot contain duplicates.   # noqa: E501

        :param days: The days of this AzureWorkshiftSchedule.  # noqa: E501
        :type: list[str]
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501
        allowed_values = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]  # noqa: E501
        if not set(days).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `days` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(days) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._days = days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureWorkshiftSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
