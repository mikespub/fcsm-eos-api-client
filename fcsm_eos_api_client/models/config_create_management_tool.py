# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ConfigCreateManagementTool(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'tool_type_id': 'str',
        'endpoint_url': 'str',
        'username': 'str',
        'password': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'tool_type_id': 'toolTypeId',
        'endpoint_url': 'endpointUrl',
        'username': 'username',
        'password': 'password'
    }

    def __init__(self, name=None, description=None, type=None, tool_type_id=None, endpoint_url=None, username=None, password=None):  # noqa: E501
        """ConfigCreateManagementTool - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._tool_type_id = None
        self._endpoint_url = None
        self._username = None
        self._password = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if tool_type_id is not None:
            self.tool_type_id = tool_type_id
        self.endpoint_url = endpoint_url
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password

    @property
    def name(self):
        """Gets the name of this ConfigCreateManagementTool.  # noqa: E501


        :return: The name of this ConfigCreateManagementTool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigCreateManagementTool.


        :param name: The name of this ConfigCreateManagementTool.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigCreateManagementTool.  # noqa: E501


        :return: The description of this ConfigCreateManagementTool.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigCreateManagementTool.


        :param description: The description of this ConfigCreateManagementTool.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ConfigCreateManagementTool.  # noqa: E501


        :return: The type of this ConfigCreateManagementTool.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigCreateManagementTool.


        :param type: The type of this ConfigCreateManagementTool.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def tool_type_id(self):
        """Gets the tool_type_id of this ConfigCreateManagementTool.  # noqa: E501


        :return: The tool_type_id of this ConfigCreateManagementTool.  # noqa: E501
        :rtype: str
        """
        return self._tool_type_id

    @tool_type_id.setter
    def tool_type_id(self, tool_type_id):
        """Sets the tool_type_id of this ConfigCreateManagementTool.


        :param tool_type_id: The tool_type_id of this ConfigCreateManagementTool.  # noqa: E501
        :type: str
        """

        self._tool_type_id = tool_type_id

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this ConfigCreateManagementTool.  # noqa: E501


        :return: The endpoint_url of this ConfigCreateManagementTool.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this ConfigCreateManagementTool.


        :param endpoint_url: The endpoint_url of this ConfigCreateManagementTool.  # noqa: E501
        :type: str
        """
        if endpoint_url is None:
            raise ValueError("Invalid value for `endpoint_url`, must not be `None`")  # noqa: E501

        self._endpoint_url = endpoint_url

    @property
    def username(self):
        """Gets the username of this ConfigCreateManagementTool.  # noqa: E501


        :return: The username of this ConfigCreateManagementTool.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigCreateManagementTool.


        :param username: The username of this ConfigCreateManagementTool.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ConfigCreateManagementTool.  # noqa: E501


        :return: The password of this ConfigCreateManagementTool.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigCreateManagementTool.


        :param password: The password of this ConfigCreateManagementTool.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCreateManagementTool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
