# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ImgWhitelistImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'min_disk_in_gb': 'int',
        'max_disk_in_gb': 'int',
        'min_ram_in_mb': 'int',
        'os': 'ImgWhitelistOSDetails',
        'compatible_flavors': 'list[ImgWhitelistFlavor]',
        'is_private': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'min_disk_in_gb': 'minDiskInGb',
        'max_disk_in_gb': 'maxDiskInGb',
        'min_ram_in_mb': 'minRamInMb',
        'os': 'os',
        'compatible_flavors': 'compatibleFlavors',
        'is_private': 'isPrivate'
    }

    def __init__(self, id=None, name=None, min_disk_in_gb=None, max_disk_in_gb=None, min_ram_in_mb=None, os=None, compatible_flavors=None, is_private=None):  # noqa: E501
        """ImgWhitelistImage - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._min_disk_in_gb = None
        self._max_disk_in_gb = None
        self._min_ram_in_mb = None
        self._os = None
        self._compatible_flavors = None
        self._is_private = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if min_disk_in_gb is not None:
            self.min_disk_in_gb = min_disk_in_gb
        if max_disk_in_gb is not None:
            self.max_disk_in_gb = max_disk_in_gb
        if min_ram_in_mb is not None:
            self.min_ram_in_mb = min_ram_in_mb
        if os is not None:
            self.os = os
        if compatible_flavors is not None:
            self.compatible_flavors = compatible_flavors
        if is_private is not None:
            self.is_private = is_private

    @property
    def id(self):
        """Gets the id of this ImgWhitelistImage.  # noqa: E501

        Image id  # noqa: E501

        :return: The id of this ImgWhitelistImage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImgWhitelistImage.

        Image id  # noqa: E501

        :param id: The id of this ImgWhitelistImage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ImgWhitelistImage.  # noqa: E501

        Image name  # noqa: E501

        :return: The name of this ImgWhitelistImage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImgWhitelistImage.

        Image name  # noqa: E501

        :param name: The name of this ImgWhitelistImage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def min_disk_in_gb(self):
        """Gets the min_disk_in_gb of this ImgWhitelistImage.  # noqa: E501

        Minimal disk size  # noqa: E501

        :return: The min_disk_in_gb of this ImgWhitelistImage.  # noqa: E501
        :rtype: int
        """
        return self._min_disk_in_gb

    @min_disk_in_gb.setter
    def min_disk_in_gb(self, min_disk_in_gb):
        """Sets the min_disk_in_gb of this ImgWhitelistImage.

        Minimal disk size  # noqa: E501

        :param min_disk_in_gb: The min_disk_in_gb of this ImgWhitelistImage.  # noqa: E501
        :type: int
        """

        self._min_disk_in_gb = min_disk_in_gb

    @property
    def max_disk_in_gb(self):
        """Gets the max_disk_in_gb of this ImgWhitelistImage.  # noqa: E501

        Maximum disk size  # noqa: E501

        :return: The max_disk_in_gb of this ImgWhitelistImage.  # noqa: E501
        :rtype: int
        """
        return self._max_disk_in_gb

    @max_disk_in_gb.setter
    def max_disk_in_gb(self, max_disk_in_gb):
        """Sets the max_disk_in_gb of this ImgWhitelistImage.

        Maximum disk size  # noqa: E501

        :param max_disk_in_gb: The max_disk_in_gb of this ImgWhitelistImage.  # noqa: E501
        :type: int
        """

        self._max_disk_in_gb = max_disk_in_gb

    @property
    def min_ram_in_mb(self):
        """Gets the min_ram_in_mb of this ImgWhitelistImage.  # noqa: E501

        Minimal ram size  # noqa: E501

        :return: The min_ram_in_mb of this ImgWhitelistImage.  # noqa: E501
        :rtype: int
        """
        return self._min_ram_in_mb

    @min_ram_in_mb.setter
    def min_ram_in_mb(self, min_ram_in_mb):
        """Sets the min_ram_in_mb of this ImgWhitelistImage.

        Minimal ram size  # noqa: E501

        :param min_ram_in_mb: The min_ram_in_mb of this ImgWhitelistImage.  # noqa: E501
        :type: int
        """

        self._min_ram_in_mb = min_ram_in_mb

    @property
    def os(self):
        """Gets the os of this ImgWhitelistImage.  # noqa: E501


        :return: The os of this ImgWhitelistImage.  # noqa: E501
        :rtype: ImgWhitelistOSDetails
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this ImgWhitelistImage.


        :param os: The os of this ImgWhitelistImage.  # noqa: E501
        :type: ImgWhitelistOSDetails
        """

        self._os = os

    @property
    def compatible_flavors(self):
        """Gets the compatible_flavors of this ImgWhitelistImage.  # noqa: E501


        :return: The compatible_flavors of this ImgWhitelistImage.  # noqa: E501
        :rtype: list[ImgWhitelistFlavor]
        """
        return self._compatible_flavors

    @compatible_flavors.setter
    def compatible_flavors(self, compatible_flavors):
        """Sets the compatible_flavors of this ImgWhitelistImage.


        :param compatible_flavors: The compatible_flavors of this ImgWhitelistImage.  # noqa: E501
        :type: list[ImgWhitelistFlavor]
        """

        self._compatible_flavors = compatible_flavors

    @property
    def is_private(self):
        """Gets the is_private of this ImgWhitelistImage.  # noqa: E501

        This field describes if image is private `true` or public `false` one  # noqa: E501

        :return: The is_private of this ImgWhitelistImage.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this ImgWhitelistImage.

        This field describes if image is private `true` or public `false` one  # noqa: E501

        :param is_private: The is_private of this ImgWhitelistImage.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImgWhitelistImage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
