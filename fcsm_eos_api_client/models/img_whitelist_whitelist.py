# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ImgWhitelistWhitelist(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'images': 'list[ImgWhitelistImage]',
        'page': 'int',
        'next_page': 'int'
    }

    attribute_map = {
        'images': 'images',
        'page': 'page',
        'next_page': 'nextPage'
    }

    def __init__(self, images=None, page=None, next_page=None):  # noqa: E501
        """ImgWhitelistWhitelist - a model defined in OpenAPI"""  # noqa: E501

        self._images = None
        self._page = None
        self._next_page = None
        self.discriminator = None

        if images is not None:
            self.images = images
        if page is not None:
            self.page = page
        if next_page is not None:
            self.next_page = next_page

    @property
    def images(self):
        """Gets the images of this ImgWhitelistWhitelist.  # noqa: E501


        :return: The images of this ImgWhitelistWhitelist.  # noqa: E501
        :rtype: list[ImgWhitelistImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ImgWhitelistWhitelist.


        :param images: The images of this ImgWhitelistWhitelist.  # noqa: E501
        :type: list[ImgWhitelistImage]
        """

        self._images = images

    @property
    def page(self):
        """Gets the page of this ImgWhitelistWhitelist.  # noqa: E501

        Current page to display  # noqa: E501

        :return: The page of this ImgWhitelistWhitelist.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ImgWhitelistWhitelist.

        Current page to display  # noqa: E501

        :param page: The page of this ImgWhitelistWhitelist.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def next_page(self):
        """Gets the next_page of this ImgWhitelistWhitelist.  # noqa: E501

        Next page to display. If there are no more items it is null  # noqa: E501

        :return: The next_page of this ImgWhitelistWhitelist.  # noqa: E501
        :rtype: int
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this ImgWhitelistWhitelist.

        Next page to display. If there are no more items it is null  # noqa: E501

        :param next_page: The next_page of this ImgWhitelistWhitelist.  # noqa: E501
        :type: int
        """

        self._next_page = next_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImgWhitelistWhitelist):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
