# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MgmtApp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'install_command': 'str',
        'uninstall_command': 'str',
        'description': 'str',
        'tool_id': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'install_command': 'installCommand',
        'uninstall_command': 'uninstallCommand',
        'description': 'description',
        'tool_id': 'toolId',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, name=None, install_command=None, uninstall_command=None, description=None, tool_id=None, updated_at=None):  # noqa: E501
        """MgmtApp - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._install_command = None
        self._uninstall_command = None
        self._description = None
        self._tool_id = None
        self._updated_at = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.install_command = install_command
        self.uninstall_command = uninstall_command
        self.description = description
        self.tool_id = tool_id
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MgmtApp.  # noqa: E501


        :return: The id of this MgmtApp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MgmtApp.


        :param id: The id of this MgmtApp.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this MgmtApp.  # noqa: E501


        :return: The name of this MgmtApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MgmtApp.


        :param name: The name of this MgmtApp.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501

        self._name = name

    @property
    def install_command(self):
        """Gets the install_command of this MgmtApp.  # noqa: E501


        :return: The install_command of this MgmtApp.  # noqa: E501
        :rtype: str
        """
        return self._install_command

    @install_command.setter
    def install_command(self, install_command):
        """Sets the install_command of this MgmtApp.


        :param install_command: The install_command of this MgmtApp.  # noqa: E501
        :type: str
        """
        if install_command is None:
            raise ValueError("Invalid value for `install_command`, must not be `None`")  # noqa: E501
        if install_command is not None and len(install_command) > 255:
            raise ValueError("Invalid value for `install_command`, length must be less than or equal to `255`")  # noqa: E501
        if install_command is not None and len(install_command) < 3:
            raise ValueError("Invalid value for `install_command`, length must be greater than or equal to `3`")  # noqa: E501

        self._install_command = install_command

    @property
    def uninstall_command(self):
        """Gets the uninstall_command of this MgmtApp.  # noqa: E501


        :return: The uninstall_command of this MgmtApp.  # noqa: E501
        :rtype: str
        """
        return self._uninstall_command

    @uninstall_command.setter
    def uninstall_command(self, uninstall_command):
        """Sets the uninstall_command of this MgmtApp.


        :param uninstall_command: The uninstall_command of this MgmtApp.  # noqa: E501
        :type: str
        """
        if uninstall_command is None:
            raise ValueError("Invalid value for `uninstall_command`, must not be `None`")  # noqa: E501
        if uninstall_command is not None and len(uninstall_command) > 255:
            raise ValueError("Invalid value for `uninstall_command`, length must be less than or equal to `255`")  # noqa: E501
        if uninstall_command is not None and len(uninstall_command) < 3:
            raise ValueError("Invalid value for `uninstall_command`, length must be greater than or equal to `3`")  # noqa: E501

        self._uninstall_command = uninstall_command

    @property
    def description(self):
        """Gets the description of this MgmtApp.  # noqa: E501


        :return: The description of this MgmtApp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MgmtApp.


        :param description: The description of this MgmtApp.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) > 3000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `3000`")  # noqa: E501

        self._description = description

    @property
    def tool_id(self):
        """Gets the tool_id of this MgmtApp.  # noqa: E501


        :return: The tool_id of this MgmtApp.  # noqa: E501
        :rtype: str
        """
        return self._tool_id

    @tool_id.setter
    def tool_id(self, tool_id):
        """Sets the tool_id of this MgmtApp.


        :param tool_id: The tool_id of this MgmtApp.  # noqa: E501
        :type: str
        """
        if tool_id is None:
            raise ValueError("Invalid value for `tool_id`, must not be `None`")  # noqa: E501

        self._tool_id = tool_id

    @property
    def updated_at(self):
        """Gets the updated_at of this MgmtApp.  # noqa: E501


        :return: The updated_at of this MgmtApp.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MgmtApp.


        :param updated_at: The updated_at of this MgmtApp.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
