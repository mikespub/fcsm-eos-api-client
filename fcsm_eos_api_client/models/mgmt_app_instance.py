# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MgmtAppInstance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'subscription_id': 'str',
        'vm_id': 'str',
        'app_name': 'Name',
        'state': 'str',
        'install_task_id': 'Id',
        'uninstall_task_id': 'Id',
        'failure_reason': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'subscription_id': 'subscriptionId',
        'vm_id': 'vmId',
        'app_name': 'appName',
        'state': 'state',
        'install_task_id': 'installTaskId',
        'uninstall_task_id': 'uninstallTaskId',
        'failure_reason': 'failureReason'
    }

    def __init__(self, id=None, created_at=None, subscription_id=None, vm_id=None, app_name=None, state=None, install_task_id=None, uninstall_task_id=None, failure_reason=None):  # noqa: E501
        """MgmtAppInstance - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._subscription_id = None
        self._vm_id = None
        self._app_name = None
        self._state = None
        self._install_task_id = None
        self._uninstall_task_id = None
        self._failure_reason = None
        self.discriminator = None

        self.id = id
        self.created_at = created_at
        self.subscription_id = subscription_id
        self.vm_id = vm_id
        self.app_name = app_name
        self.state = state
        self.install_task_id = install_task_id
        if uninstall_task_id is not None:
            self.uninstall_task_id = uninstall_task_id
        self.failure_reason = failure_reason

    @property
    def id(self):
        """Gets the id of this MgmtAppInstance.  # noqa: E501


        :return: The id of this MgmtAppInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MgmtAppInstance.


        :param id: The id of this MgmtAppInstance.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this MgmtAppInstance.  # noqa: E501


        :return: The created_at of this MgmtAppInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MgmtAppInstance.


        :param created_at: The created_at of this MgmtAppInstance.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def subscription_id(self):
        """Gets the subscription_id of this MgmtAppInstance.  # noqa: E501


        :return: The subscription_id of this MgmtAppInstance.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this MgmtAppInstance.


        :param subscription_id: The subscription_id of this MgmtAppInstance.  # noqa: E501
        :type: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def vm_id(self):
        """Gets the vm_id of this MgmtAppInstance.  # noqa: E501


        :return: The vm_id of this MgmtAppInstance.  # noqa: E501
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this MgmtAppInstance.


        :param vm_id: The vm_id of this MgmtAppInstance.  # noqa: E501
        :type: str
        """
        if vm_id is None:
            raise ValueError("Invalid value for `vm_id`, must not be `None`")  # noqa: E501

        self._vm_id = vm_id

    @property
    def app_name(self):
        """Gets the app_name of this MgmtAppInstance.  # noqa: E501


        :return: The app_name of this MgmtAppInstance.  # noqa: E501
        :rtype: Name
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this MgmtAppInstance.


        :param app_name: The app_name of this MgmtAppInstance.  # noqa: E501
        :type: Name
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def state(self):
        """Gets the state of this MgmtAppInstance.  # noqa: E501


        :return: The state of this MgmtAppInstance.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MgmtAppInstance.


        :param state: The state of this MgmtAppInstance.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["INITIAL", "INSTALLING", "INSTALL_SUCCEEDED", "INSTALL_FAILED", "UNINSTALLING", "UNINSTALL_SUCCEEDED", "UNINSTALL_FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def install_task_id(self):
        """Gets the install_task_id of this MgmtAppInstance.  # noqa: E501


        :return: The install_task_id of this MgmtAppInstance.  # noqa: E501
        :rtype: Id
        """
        return self._install_task_id

    @install_task_id.setter
    def install_task_id(self, install_task_id):
        """Sets the install_task_id of this MgmtAppInstance.


        :param install_task_id: The install_task_id of this MgmtAppInstance.  # noqa: E501
        :type: Id
        """
        if install_task_id is None:
            raise ValueError("Invalid value for `install_task_id`, must not be `None`")  # noqa: E501

        self._install_task_id = install_task_id

    @property
    def uninstall_task_id(self):
        """Gets the uninstall_task_id of this MgmtAppInstance.  # noqa: E501


        :return: The uninstall_task_id of this MgmtAppInstance.  # noqa: E501
        :rtype: Id
        """
        return self._uninstall_task_id

    @uninstall_task_id.setter
    def uninstall_task_id(self, uninstall_task_id):
        """Sets the uninstall_task_id of this MgmtAppInstance.


        :param uninstall_task_id: The uninstall_task_id of this MgmtAppInstance.  # noqa: E501
        :type: Id
        """

        self._uninstall_task_id = uninstall_task_id

    @property
    def failure_reason(self):
        """Gets the failure_reason of this MgmtAppInstance.  # noqa: E501


        :return: The failure_reason of this MgmtAppInstance.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this MgmtAppInstance.


        :param failure_reason: The failure_reason of this MgmtAppInstance.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtAppInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
