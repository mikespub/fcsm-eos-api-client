# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MgmtToolToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'tool_id': 'str',
        'value': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'tool_id': 'toolId',
        'value': 'value',
        'created_at': 'createdAt'
    }

    def __init__(self, name=None, tool_id=None, value=None, created_at=None):  # noqa: E501
        """MgmtToolToken - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._tool_id = None
        self._value = None
        self._created_at = None
        self.discriminator = None

        self.name = name
        self.tool_id = tool_id
        self.value = value
        self.created_at = created_at

    @property
    def name(self):
        """Gets the name of this MgmtToolToken.  # noqa: E501


        :return: The name of this MgmtToolToken.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MgmtToolToken.


        :param name: The name of this MgmtToolToken.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501

        self._name = name

    @property
    def tool_id(self):
        """Gets the tool_id of this MgmtToolToken.  # noqa: E501


        :return: The tool_id of this MgmtToolToken.  # noqa: E501
        :rtype: str
        """
        return self._tool_id

    @tool_id.setter
    def tool_id(self, tool_id):
        """Sets the tool_id of this MgmtToolToken.


        :param tool_id: The tool_id of this MgmtToolToken.  # noqa: E501
        :type: str
        """
        if tool_id is None:
            raise ValueError("Invalid value for `tool_id`, must not be `None`")  # noqa: E501

        self._tool_id = tool_id

    @property
    def value(self):
        """Gets the value of this MgmtToolToken.  # noqa: E501


        :return: The value of this MgmtToolToken.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MgmtToolToken.


        :param value: The value of this MgmtToolToken.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def created_at(self):
        """Gets the created_at of this MgmtToolToken.  # noqa: E501


        :return: The created_at of this MgmtToolToken.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MgmtToolToken.


        :param created_at: The created_at of this MgmtToolToken.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtToolToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
