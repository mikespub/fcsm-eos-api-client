# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MgmtVmDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpuinfo': 'object',
        'diskusage': 'object',
        'meminfo': 'object',
        'netdev': 'object',
        'uptime': 'object',
        'loadavg': 'object'
    }

    attribute_map = {
        'cpuinfo': 'cpuinfo',
        'diskusage': 'diskusage',
        'meminfo': 'meminfo',
        'netdev': 'netdev',
        'uptime': 'uptime',
        'loadavg': 'loadavg'
    }

    def __init__(self, cpuinfo=None, diskusage=None, meminfo=None, netdev=None, uptime=None, loadavg=None):  # noqa: E501
        """MgmtVmDetails - a model defined in OpenAPI"""  # noqa: E501

        self._cpuinfo = None
        self._diskusage = None
        self._meminfo = None
        self._netdev = None
        self._uptime = None
        self._loadavg = None
        self.discriminator = None

        if cpuinfo is not None:
            self.cpuinfo = cpuinfo
        if diskusage is not None:
            self.diskusage = diskusage
        if meminfo is not None:
            self.meminfo = meminfo
        if netdev is not None:
            self.netdev = netdev
        if uptime is not None:
            self.uptime = uptime
        if loadavg is not None:
            self.loadavg = loadavg

    @property
    def cpuinfo(self):
        """Gets the cpuinfo of this MgmtVmDetails.  # noqa: E501

        Cpu info  # noqa: E501

        :return: The cpuinfo of this MgmtVmDetails.  # noqa: E501
        :rtype: object
        """
        return self._cpuinfo

    @cpuinfo.setter
    def cpuinfo(self, cpuinfo):
        """Sets the cpuinfo of this MgmtVmDetails.

        Cpu info  # noqa: E501

        :param cpuinfo: The cpuinfo of this MgmtVmDetails.  # noqa: E501
        :type: object
        """

        self._cpuinfo = cpuinfo

    @property
    def diskusage(self):
        """Gets the diskusage of this MgmtVmDetails.  # noqa: E501

        Disk usage info  # noqa: E501

        :return: The diskusage of this MgmtVmDetails.  # noqa: E501
        :rtype: object
        """
        return self._diskusage

    @diskusage.setter
    def diskusage(self, diskusage):
        """Sets the diskusage of this MgmtVmDetails.

        Disk usage info  # noqa: E501

        :param diskusage: The diskusage of this MgmtVmDetails.  # noqa: E501
        :type: object
        """

        self._diskusage = diskusage

    @property
    def meminfo(self):
        """Gets the meminfo of this MgmtVmDetails.  # noqa: E501

        Memory information  # noqa: E501

        :return: The meminfo of this MgmtVmDetails.  # noqa: E501
        :rtype: object
        """
        return self._meminfo

    @meminfo.setter
    def meminfo(self, meminfo):
        """Sets the meminfo of this MgmtVmDetails.

        Memory information  # noqa: E501

        :param meminfo: The meminfo of this MgmtVmDetails.  # noqa: E501
        :type: object
        """

        self._meminfo = meminfo

    @property
    def netdev(self):
        """Gets the netdev of this MgmtVmDetails.  # noqa: E501

        Network information  # noqa: E501

        :return: The netdev of this MgmtVmDetails.  # noqa: E501
        :rtype: object
        """
        return self._netdev

    @netdev.setter
    def netdev(self, netdev):
        """Sets the netdev of this MgmtVmDetails.

        Network information  # noqa: E501

        :param netdev: The netdev of this MgmtVmDetails.  # noqa: E501
        :type: object
        """

        self._netdev = netdev

    @property
    def uptime(self):
        """Gets the uptime of this MgmtVmDetails.  # noqa: E501

        Uptime information  # noqa: E501

        :return: The uptime of this MgmtVmDetails.  # noqa: E501
        :rtype: object
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this MgmtVmDetails.

        Uptime information  # noqa: E501

        :param uptime: The uptime of this MgmtVmDetails.  # noqa: E501
        :type: object
        """

        self._uptime = uptime

    @property
    def loadavg(self):
        """Gets the loadavg of this MgmtVmDetails.  # noqa: E501

        Avg load  # noqa: E501

        :return: The loadavg of this MgmtVmDetails.  # noqa: E501
        :rtype: object
        """
        return self._loadavg

    @loadavg.setter
    def loadavg(self, loadavg):
        """Sets the loadavg of this MgmtVmDetails.

        Avg load  # noqa: E501

        :param loadavg: The loadavg of this MgmtVmDetails.  # noqa: E501
        :type: object
        """

        self._loadavg = loadavg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtVmDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
