# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NotifMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subject': 'str',
        'body': 'str',
        'recipients': 'list[str]',
        'provider_id': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'body': 'body',
        'recipients': 'recipients',
        'provider_id': 'providerId'
    }

    def __init__(self, subject=None, body=None, recipients=None, provider_id=None):  # noqa: E501
        """NotifMessage - a model defined in OpenAPI"""  # noqa: E501

        self._subject = None
        self._body = None
        self._recipients = None
        self._provider_id = None
        self.discriminator = None

        self.subject = subject
        self.body = body
        self.recipients = recipients
        if provider_id is not None:
            self.provider_id = provider_id

    @property
    def subject(self):
        """Gets the subject of this NotifMessage.  # noqa: E501

        Email subject  # noqa: E501

        :return: The subject of this NotifMessage.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NotifMessage.

        Email subject  # noqa: E501

        :param subject: The subject of this NotifMessage.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this NotifMessage.  # noqa: E501

        Email body  # noqa: E501

        :return: The body of this NotifMessage.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this NotifMessage.

        Email body  # noqa: E501

        :param body: The body of this NotifMessage.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def recipients(self):
        """Gets the recipients of this NotifMessage.  # noqa: E501

        List of recipients email addresses  # noqa: E501

        :return: The recipients of this NotifMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this NotifMessage.

        List of recipients email addresses  # noqa: E501

        :param recipients: The recipients of this NotifMessage.  # noqa: E501
        :type: list[str]
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")  # noqa: E501

        self._recipients = recipients

    @property
    def provider_id(self):
        """Gets the provider_id of this NotifMessage.  # noqa: E501

        Optional parameter to specify provider id (managed in config service)  # noqa: E501

        :return: The provider_id of this NotifMessage.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this NotifMessage.

        Optional parameter to specify provider id (managed in config service)  # noqa: E501

        :param provider_id: The provider_id of this NotifMessage.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotifMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
