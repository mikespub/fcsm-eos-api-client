# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubscrToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token': 'str',
        'services': 'SubscrTokenServices',
        'domain_id': 'str',
        'user_id': 'str',
        'subscription_id': 'str',
        'subscription_name': 'str',
        'provisioning': 'bool'
    }

    attribute_map = {
        'token': 'token',
        'services': 'services',
        'domain_id': 'domainId',
        'user_id': 'userId',
        'subscription_id': 'subscriptionId',
        'subscription_name': 'subscriptionName',
        'provisioning': 'provisioning'
    }

    def __init__(self, token=None, services=None, domain_id=None, user_id=None, subscription_id=None, subscription_name=None, provisioning=None):  # noqa: E501
        """SubscrToken - a model defined in OpenAPI"""  # noqa: E501

        self._token = None
        self._services = None
        self._domain_id = None
        self._user_id = None
        self._subscription_id = None
        self._subscription_name = None
        self._provisioning = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if services is not None:
            self.services = services
        self.domain_id = domain_id
        self.user_id = user_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_name is not None:
            self.subscription_name = subscription_name
        if provisioning is not None:
            self.provisioning = provisioning

    @property
    def token(self):
        """Gets the token of this SubscrToken.  # noqa: E501

        token  # noqa: E501

        :return: The token of this SubscrToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SubscrToken.

        token  # noqa: E501

        :param token: The token of this SubscrToken.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def services(self):
        """Gets the services of this SubscrToken.  # noqa: E501


        :return: The services of this SubscrToken.  # noqa: E501
        :rtype: SubscrTokenServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this SubscrToken.


        :param services: The services of this SubscrToken.  # noqa: E501
        :type: SubscrTokenServices
        """

        self._services = services

    @property
    def domain_id(self):
        """Gets the domain_id of this SubscrToken.  # noqa: E501


        :return: The domain_id of this SubscrToken.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this SubscrToken.


        :param domain_id: The domain_id of this SubscrToken.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def user_id(self):
        """Gets the user_id of this SubscrToken.  # noqa: E501


        :return: The user_id of this SubscrToken.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SubscrToken.


        :param user_id: The user_id of this SubscrToken.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscrToken.  # noqa: E501

        Id of a subscription  # noqa: E501

        :return: The subscription_id of this SubscrToken.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscrToken.

        Id of a subscription  # noqa: E501

        :param subscription_id: The subscription_id of this SubscrToken.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_name(self):
        """Gets the subscription_name of this SubscrToken.  # noqa: E501

        Name of a subscription  # noqa: E501

        :return: The subscription_name of this SubscrToken.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this SubscrToken.

        Name of a subscription  # noqa: E501

        :param subscription_name: The subscription_name of this SubscrToken.  # noqa: E501
        :type: str
        """

        self._subscription_name = subscription_name

    @property
    def provisioning(self):
        """Gets the provisioning of this SubscrToken.  # noqa: E501

        States if provisioning is enabled  # noqa: E501

        :return: The provisioning of this SubscrToken.  # noqa: E501
        :rtype: bool
        """
        return self._provisioning

    @provisioning.setter
    def provisioning(self, provisioning):
        """Sets the provisioning of this SubscrToken.

        States if provisioning is enabled  # noqa: E501

        :param provisioning: The provisioning of this SubscrToken.  # noqa: E501
        :type: bool
        """

        self._provisioning = provisioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscrToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
