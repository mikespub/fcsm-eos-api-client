# coding: utf-8

"""
    Combined FCSM EOS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubscrTokenServices(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'compute': 'str',
        'volumev2': 'str',
        'image': 'str',
        'cloudformation': 'str',
        'orchestration': 'str',
        'network': 'str',
        'identity': 'str',
        'volume': 'str'
    }

    attribute_map = {
        'compute': 'compute',
        'volumev2': 'volumev2',
        'image': 'image',
        'cloudformation': 'cloudformation',
        'orchestration': 'orchestration',
        'network': 'network',
        'identity': 'identity',
        'volume': 'volume'
    }

    def __init__(self, compute=None, volumev2=None, image=None, cloudformation=None, orchestration=None, network=None, identity=None, volume=None):  # noqa: E501
        """SubscrTokenServices - a model defined in OpenAPI"""  # noqa: E501

        self._compute = None
        self._volumev2 = None
        self._image = None
        self._cloudformation = None
        self._orchestration = None
        self._network = None
        self._identity = None
        self._volume = None
        self.discriminator = None

        if compute is not None:
            self.compute = compute
        if volumev2 is not None:
            self.volumev2 = volumev2
        if image is not None:
            self.image = image
        if cloudformation is not None:
            self.cloudformation = cloudformation
        if orchestration is not None:
            self.orchestration = orchestration
        if network is not None:
            self.network = network
        if identity is not None:
            self.identity = identity
        if volume is not None:
            self.volume = volume

    @property
    def compute(self):
        """Gets the compute of this SubscrTokenServices.  # noqa: E501


        :return: The compute of this SubscrTokenServices.  # noqa: E501
        :rtype: str
        """
        return self._compute

    @compute.setter
    def compute(self, compute):
        """Sets the compute of this SubscrTokenServices.


        :param compute: The compute of this SubscrTokenServices.  # noqa: E501
        :type: str
        """

        self._compute = compute

    @property
    def volumev2(self):
        """Gets the volumev2 of this SubscrTokenServices.  # noqa: E501


        :return: The volumev2 of this SubscrTokenServices.  # noqa: E501
        :rtype: str
        """
        return self._volumev2

    @volumev2.setter
    def volumev2(self, volumev2):
        """Sets the volumev2 of this SubscrTokenServices.


        :param volumev2: The volumev2 of this SubscrTokenServices.  # noqa: E501
        :type: str
        """

        self._volumev2 = volumev2

    @property
    def image(self):
        """Gets the image of this SubscrTokenServices.  # noqa: E501


        :return: The image of this SubscrTokenServices.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SubscrTokenServices.


        :param image: The image of this SubscrTokenServices.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def cloudformation(self):
        """Gets the cloudformation of this SubscrTokenServices.  # noqa: E501


        :return: The cloudformation of this SubscrTokenServices.  # noqa: E501
        :rtype: str
        """
        return self._cloudformation

    @cloudformation.setter
    def cloudformation(self, cloudformation):
        """Sets the cloudformation of this SubscrTokenServices.


        :param cloudformation: The cloudformation of this SubscrTokenServices.  # noqa: E501
        :type: str
        """

        self._cloudformation = cloudformation

    @property
    def orchestration(self):
        """Gets the orchestration of this SubscrTokenServices.  # noqa: E501


        :return: The orchestration of this SubscrTokenServices.  # noqa: E501
        :rtype: str
        """
        return self._orchestration

    @orchestration.setter
    def orchestration(self, orchestration):
        """Sets the orchestration of this SubscrTokenServices.


        :param orchestration: The orchestration of this SubscrTokenServices.  # noqa: E501
        :type: str
        """

        self._orchestration = orchestration

    @property
    def network(self):
        """Gets the network of this SubscrTokenServices.  # noqa: E501


        :return: The network of this SubscrTokenServices.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this SubscrTokenServices.


        :param network: The network of this SubscrTokenServices.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def identity(self):
        """Gets the identity of this SubscrTokenServices.  # noqa: E501


        :return: The identity of this SubscrTokenServices.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this SubscrTokenServices.


        :param identity: The identity of this SubscrTokenServices.  # noqa: E501
        :type: str
        """

        self._identity = identity

    @property
    def volume(self):
        """Gets the volume of this SubscrTokenServices.  # noqa: E501


        :return: The volume of this SubscrTokenServices.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this SubscrTokenServices.


        :param volume: The volume of this SubscrTokenServices.  # noqa: E501
        :type: str
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscrTokenServices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
